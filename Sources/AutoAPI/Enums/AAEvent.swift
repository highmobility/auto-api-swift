//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AAEvent.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities


/// Triggered event.
public enum AAEvent: String, CaseIterable, Codable, HMBytesConvertable {

    case accidentReported
    case authorizationChanged
    case batteryGuardWarning
    case breakdownReported
    case dashboardLightsChanged
    case emergencyReported
    case engineChanged
    case fleetClearanceChanged
    case harshAccelerationPedalPositionTriggered
    case harshAccelerationTriggered
    case harshBrakingTriggered
    case harshCorneringTriggered
    case ignitionChanged
    case maintenanceChanged
    case ping
    case seatBeltTriggered
    case tirePressureChanged
    case tripEnded
    case tripStarted
    case vehicleLocationChanged


    public var byteValue: UInt8 {
        switch self {
        case .ping: return 0x00
        case .tripStarted: return 0x01
        case .tripEnded: return 0x02
        case .vehicleLocationChanged: return 0x03
        case .authorizationChanged: return 0x04
        case .tirePressureChanged: return 0x05
        case .harshAccelerationTriggered: return 0x06
        case .harshAccelerationPedalPositionTriggered: return 0x07
        case .harshBrakingTriggered: return 0x08
        case .harshCorneringTriggered: return 0x09
        case .seatBeltTriggered: return 0x0a
        case .maintenanceChanged: return 0x0b
        case .dashboardLightsChanged: return 0x0c
        case .ignitionChanged: return 0x0d
        case .accidentReported: return 0x0e
        case .emergencyReported: return 0x0f
        case .breakdownReported: return 0x10
        case .batteryGuardWarning: return 0x11
        case .engineChanged: return 0x12
        case .fleetClearanceChanged: return 0x13
        }
    }


    // MARK: HMBytesConvertable

    public var bytes: [UInt8] {
        [byteValue]
    }


    public init?(bytes: [UInt8]) {
        guard let uint8 = UInt8(bytes: bytes) else {
            return nil
        }

        switch uint8 {
        case 0x00: self = .ping
        case 0x01: self = .tripStarted
        case 0x02: self = .tripEnded
        case 0x03: self = .vehicleLocationChanged
        case 0x04: self = .authorizationChanged
        case 0x05: self = .tirePressureChanged
        case 0x06: self = .harshAccelerationTriggered
        case 0x07: self = .harshAccelerationPedalPositionTriggered
        case 0x08: self = .harshBrakingTriggered
        case 0x09: self = .harshCorneringTriggered
        case 0x0a: self = .seatBeltTriggered
        case 0x0b: self = .maintenanceChanged
        case 0x0c: self = .dashboardLightsChanged
        case 0x0d: self = .ignitionChanged
        case 0x0e: self = .accidentReported
        case 0x0f: self = .emergencyReported
        case 0x10: self = .breakdownReported
        case 0x11: self = .batteryGuardWarning
        case 0x12: self = .engineChanged
        case 0x13: self = .fleetClearanceChanged
        default: return nil
        }
    }
}
