//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AAFailure.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities


public final class AAFailure: Codable, HMBytesConvertable {

    /// Reason.
    public enum Reason: String, CaseIterable, Codable, HMBytesConvertable {
    
        case rateLimit = "rateLimit"
        case executionTimeout = "executionTimeout"
        case formatError = "formatError"
        case unauthorised = "unauthorised"
        case unknown = "unknown"
        case pending = "pending"
        case oemError = "oemError"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .rateLimit: return 0x00
            case .executionTimeout: return 0x01
            case .formatError: return 0x02
            case .unauthorised: return 0x03
            case .unknown: return 0x04
            case .pending: return 0x05
            case .oemError: return 0x06
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .rateLimit
            case 0x01: self = .executionTimeout
            case 0x02: self = .formatError
            case 0x03: self = .unauthorised
            case 0x04: self = .unknown
            case 0x05: self = .pending
            case 0x06: self = .oemError
            default: return nil
            }
        }
    }


    /// Reason.
    public var reason: Reason

    /// Failure description.
    public var description: String


    /// Initialise `AAFailure` with arguments.
    ///
    /// - parameters:
    ///     - reason: Reason.
    ///     - description: Failure description.
    public init(reason: Reason, description: String) {
        self.bytes = [reason.bytes, description.bytes.sizeBytes(amount: 2), description.bytes].flatMap { $0 }
        self.reason = reason
        self.description = description
    }


    // MARK: HMBytesConvertable
    
    public let bytes: [UInt8]
    
    
    /// Initialise `AAFailure` with bytes.
    ///
    /// - parameters:
    ///     - bytes: Bytes array in `[UInt8]`.
    public required init?(bytes: [UInt8]) {
        guard bytes.count >= 1 else {
            return nil
        }
    
        guard let reason = Reason(bytes: bytes[0..<1].bytes),
    		  let description = bytes.extract(stringFrom: 1) else {
            return nil
        }
    
        self.bytes = bytes
        self.reason = reason
        self.description = description
    }
}