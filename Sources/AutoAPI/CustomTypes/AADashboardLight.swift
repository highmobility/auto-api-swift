//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AADashboardLight.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities


public final class AADashboardLight: Codable, HMBytesConvertable {

    /// Name enum.
    public enum Name: UInt8, CaseIterable, Codable, HMBytesConvertable {
        case highBeam = 0x00
        case lowBeam = 0x01
        case hazardWarning = 0x02
        case brakeFailure = 0x03
        case hatchOpen = 0x04
        case fuelLevel = 0x05
        case engineCoolantTemperature = 0x06
        case batteryChargingCondition = 0x07
        case engineOil = 0x08
        case positionLights = 0x09
        case frontFogLight = 0x0a
        case rearFogLight = 0x0b
        case parkHeating = 0x0c
        case engineIndicator = 0x0d
        case serviceCall = 0x0e
        case transmissionFluidTemperature = 0x0f
        case transmissionFailure = 0x10
        case antiLockBrakeFailure = 0x11
        case wornBrakeLinings = 0x12
        case windscreenWasherFluid = 0x13
        case tireFailure = 0x14
        case engineOilLevel = 0x15
        case engineCoolantLevel = 0x16
        case steeringFailure = 0x17
        case escIndication = 0x18
        case brakeLights = 0x19
        case adblueLevel = 0x1a
        case fuelFilterDiffPressure = 0x1b
        case seatBelt = 0x1c
        case advancedBraking = 0x1d
        case acc = 0x1e
        case trailerConnected = 0x1f
        case airbag = 0x20
        case escSwitchedOff = 0x21
        case laneDepartureWarningOff = 0x22
        case airFilterMinder = 0x23
        case airSuspensionRideControlFault = 0x24
        case allWheelDriveDisabled = 0x25
        case antiTheft = 0x26
        case blindSpotDetection = 0x27
        case chargeSystemFault = 0x28
        case checkFuelCap = 0x29
        case checkFuelFillInlet = 0x2a
        case checkFuelFilter = 0x2b
        case dcTempWarning = 0x2c
        case dcWarningStatus = 0x2d
        case dieselEngineIdleShutdown = 0x2e
        case dieselEngineWarning = 0x2f
        case dieselExhaustFluidSystemFault = 0x30
        case dieselExhaustOverTemp = 0x31
        case dieselExhaustFluidQuality = 0x32
        case dieselFilterRegeneration = 0x33
        case dieselParticulateFilter = 0x34
        case dieselPreHeat = 0x35
        case electricTrailerBrakeConnection = 0x36
        case evBatteryCellMaxVoltWarning = 0x37
        case evBatteryCellMinVoltWarning = 0x38
        case evBatteryChargeEnergyStorageWarning = 0x39
        case evBatteryHighLevelWarning = 0x3a
        case evBatteryHighTemperatureWarning = 0x3b
        case evBatteryInsulationResistWarning = 0x3c
        case evBatteryJumpLevelWarning = 0x3d
        case evBatteryLowLevelWarning = 0x3e
        case evBatteryMaxVoltVehEnergyWarning = 0x3f
        case evBatteryMinVoltVehEnergyWarning = 0x40
        case evBatteryOverChargeWarning = 0x41
        case evBatteryPoorCellWarning = 0x42
        case evBatteryTempDiffWarning = 0x43
        case forwardCollisionWarning = 0x44
        case fuelDoorOpen = 0x45
        case hillDescentControlFault = 0x46
        case hillStartAssistWarning = 0x47
        case hvInterlockingStatusWarning = 0x48
        case lightingSystemFailure = 0x49
        case malfunctionIndicator = 0x4a
        case motorControllerTempWarning = 0x4b
        case parkAidMalfunction = 0x4c
        case passiveEntryPassiveStart = 0x4d
        case powertrainMalfunction = 0x4e
        case restraintsIndicatorWarning = 0x4f
        case startStopEngineWarning = 0x50
        case tractionControlDisabled = 0x51
        case tractionControlActive = 0x52
        case tractionMotorTempWarning = 0x53
        case tirePressureMonitorSystemWarning = 0x54
        case waterInFuel = 0x55
        case tireWarningFrontRight = 0x56
        case tireWarningFrontLeft = 0x57
        case tireWarningRearRight = 0x58
        case tireWarningRearLeft = 0x59
        case tireWarningSystemError = 0x5a
        case batteryLowWarning = 0x5b
        case brakeFluidWarning = 0x5c
    }


    /// Name.
    public var name: Name

    /// On-Off State.
    public var state: AAOnOffState


    /// Initialise `AADashboardLight` with arguments.
    ///
    /// - parameters:
    ///     - name: Name.
    ///     - state: On-Off State.
    public init(name: Name, state: AAOnOffState) {
        self.bytes = [name.bytes, state.bytes].flatMap { $0 }
        self.name = name
        self.state = state
    }


    // MARK: HMBytesConvertable
    
    public let bytes: [UInt8]
    
    
    /// Initialise `AADashboardLight` with bytes.
    ///
    /// - parameters:
    ///     - bytes: Bytes array in `[UInt8]`.
    public required init?(bytes: [UInt8]) {
        guard bytes.count == 2 else {
            return nil
        }
    
        guard let name = Name(bytes: bytes[0..<1].bytes),
    		  let state = AAOnOffState(bytes: bytes[1..<2].bytes) else {
            return nil
        }
    
        self.bytes = bytes
        self.name = name
        self.state = state
    }
}