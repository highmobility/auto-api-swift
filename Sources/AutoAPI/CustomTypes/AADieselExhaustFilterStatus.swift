//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AADieselExhaustFilterStatus.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities


public final class AADieselExhaustFilterStatus: Codable, HMBytesConvertable {

    /// Status enum.
    public enum Status: String, CaseIterable, Codable, HMBytesConvertable {
    
        case unknown = "unknown"
        case normalOperation = "normalOperation"
        case overloaded = "overloaded"
        case atLimit = "atLimit"
        case overLimit = "overLimit"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .unknown: return 0x00
            case .normalOperation: return 0x01
            case .overloaded: return 0x02
            case .atLimit: return 0x03
            case .overLimit: return 0x04
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .unknown
            case 0x01: self = .normalOperation
            case 0x02: self = .overloaded
            case 0x03: self = .atLimit
            case 0x04: self = .overLimit
            default: return nil
            }
        }
    }

    /// Component enum.
    public enum Component: String, CaseIterable, Codable, HMBytesConvertable {
    
        case unknown = "unknown"
        case exhaustFilter = "exhaustFilter"
        case dieselParticulateFilter = "dieselParticulateFilter"
        case overboostCodeRegulator = "overboostCodeRegulator"
        case offBoardRegeneration = "offBoardRegeneration"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .unknown: return 0x00
            case .exhaustFilter: return 0x01
            case .dieselParticulateFilter: return 0x02
            case .overboostCodeRegulator: return 0x03
            case .offBoardRegeneration: return 0x04
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .unknown
            case 0x01: self = .exhaustFilter
            case 0x02: self = .dieselParticulateFilter
            case 0x03: self = .overboostCodeRegulator
            case 0x04: self = .offBoardRegeneration
            default: return nil
            }
        }
    }

    /// Cleaning enum.
    public enum Cleaning: String, CaseIterable, Codable, HMBytesConvertable {
    
        case unknown = "unknown"
        case inProgress = "inProgress"
        case complete = "complete"
        case interrupted = "interrupted"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .unknown: return 0x00
            case .inProgress: return 0x01
            case .complete: return 0x02
            case .interrupted: return 0x03
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .unknown
            case 0x01: self = .inProgress
            case 0x02: self = .complete
            case 0x03: self = .interrupted
            default: return nil
            }
        }
    }


    /// Status.
    public var status: Status

    /// Component.
    public var component: Component

    /// Cleaning.
    public var cleaning: Cleaning


    /// Initialise `AADieselExhaustFilterStatus` with arguments.
    ///
    /// - parameters:
    ///     - status: Status.
    ///     - component: Component.
    ///     - cleaning: Cleaning.
    public init(status: Status, component: Component, cleaning: Cleaning) {
        self.bytes = [status.bytes, component.bytes, cleaning.bytes].flatMap { $0 }
        self.status = status
        self.component = component
        self.cleaning = cleaning
    }


    // MARK: HMBytesConvertable
    
    public let bytes: [UInt8]
    
    
    /// Initialise `AADieselExhaustFilterStatus` with bytes.
    ///
    /// - parameters:
    ///     - bytes: Bytes array in `[UInt8]`.
    public required init?(bytes: [UInt8]) {
        guard bytes.count == 3 else {
            return nil
        }
    
        guard let status = Status(bytes: bytes[0..<1].bytes),
    		  let component = Component(bytes: bytes[1..<2].bytes),
    		  let cleaning = Cleaning(bytes: bytes[2..<3].bytes) else {
            return nil
        }
    
        self.bytes = bytes
        self.status = status
        self.component = component
        self.cleaning = cleaning
    }
}