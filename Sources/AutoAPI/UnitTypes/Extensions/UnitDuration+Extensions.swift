//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  UnitDuration+Extensions.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation


public extension UnitDuration {

    static let days = UnitDuration(symbol: "hm_d", converter: UnitConverterLinear(coefficient: 86400.0))

    static let weeks = UnitDuration(symbol: "hm_w", converter: UnitConverterLinear(coefficient: 604800.0))

    static let months = UnitDuration(symbol: "hm_m", converter: UnitConverterLinear(coefficient: 2629800.0))
}

extension UnitDuration: AAUnitType {

    public enum DurationUnit: String, Codable {
        case seconds
        case minutes
        case hours
        case days
        case weeks
        case months
    }


    public static let measurementID: UInt8 = 0x07


    public static func create(id: UInt8) -> Self? {
        switch id {
        case 0x00:  return UnitDuration.seconds as? Self
        case 0x01:  return UnitDuration.minutes as? Self
        case 0x02:  return UnitDuration.hours as? Self
        case 0x03:  return UnitDuration.days as? Self
        case 0x04:  return UnitDuration.weeks as? Self
        case 0x05:  return UnitDuration.months as? Self

        default:    return nil
        }
    }

    public static func create(unit: DurationUnit) -> UnitDuration {
        switch unit {
        case .seconds: return Self.seconds
        case .minutes: return Self.minutes
        case .hours: return Self.hours
        case .days: return Self.days
        case .weeks: return Self.weeks
        case .months: return Self.months
        }
    }


    public var identifiers: [UInt8]? {
        switch self {
        case .seconds: return [Self.measurementID, 0x00]
        case .minutes: return [Self.measurementID, 0x01]
        case .hours: return [Self.measurementID, 0x02]
        case .days: return [Self.measurementID, 0x03]
        case .weeks: return [Self.measurementID, 0x04]
        case .months: return [Self.measurementID, 0x05]

        default: return nil
        }
    }

    public var unit: DurationUnit? {
        switch self {
        case .seconds: return .seconds
        case .minutes: return .minutes
        case .hours: return .hours
        case .days: return .days
        case .weeks: return .weeks
        case .months: return .months

        default: return nil
        }
    }
}
