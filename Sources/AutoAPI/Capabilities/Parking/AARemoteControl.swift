//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AARemoteControl.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities


public final class AARemoteControl: AACapability, AAPropertyIdentifying {

    /// Information about the introduction and last update of this capability.
    public enum API: AAAPICurrent {
        /// Level (version) of *AutoAPI* when `AARemoteControl` was introduced to the spec.
        public static let intro: UInt8 = 2
    
        /// Level (version) of *AutoAPI* when `AARemoteControl` was last updated.
        public static let updated: UInt8 = 12
    }


    /// Control mode enum.
    public enum ControlMode: String, CaseIterable, Codable, HMBytesConvertable {
    
        case unavailable = "unavailable"
        case available = "available"
        case started = "started"
        case failedToStart = "failedToStart"
        case aborted = "aborted"
        case ended = "ended"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .unavailable: return 0x00
            case .available: return 0x01
            case .started: return 0x02
            case .failedToStart: return 0x03
            case .aborted: return 0x04
            case .ended: return 0x05
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .unavailable
            case 0x01: self = .available
            case 0x02: self = .started
            case 0x03: self = .failedToStart
            case 0x04: self = .aborted
            case 0x05: self = .ended
            default: return nil
            }
        }
    }


    // MARK: Identifiers
    
    public class override var identifier: UInt16 { 0x0027 }


    /// Property identifiers for `AARemoteControl`.
    public enum PropertyIdentifier: UInt8, CaseIterable {
        case controlMode = 0x01
        case angle = 0x02
        case speed = 0x03		// Non-state property (can't be retrieved)
    }


    // MARK: Properties
    
    /// Wheel base angle.
    public var angle: AAProperty<Measurement<UnitAngle>>?
    
    /// Control mode value.
    public var controlMode: AAProperty<ControlMode>?


    // MARK: Getters
    
    /// Get `AARemoteControl` state (all properties).
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getControlState() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.get.rawValue.bytes
    }
    
    /// Get `AARemoteControl` state properties availability.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getControlStateAvailability() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.availability.rawValue.bytes
    }


    // MARK: Setters
    
    /// To be sent every time the controls for the vehicle wants to be changed or once a second if the controls remain the same. If the vehicle does not receive the command every second it will stop the control mode.
    /// 
    /// - parameters:
    ///     - angle: Wheel base angle.
    ///     - speed: Target speed.
    ///
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func controlCommand(angle: Measurement<UnitAngle>? = nil, speed: Measurement<UnitSpeed>? = nil) -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.angle, value: angle))
        properties.append(AAProperty(id: PropertyIdentifier.speed, value: speed))
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }
    
    /// Attempt to start the control mode of the vehicle.
    /// 
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func startControl() -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.controlMode.rawValue, value: ControlMode(bytes: [0x02])))
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }
    
    /// Attempt to stop the control mode of the vehicle.
    /// 
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func stopControl() -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.controlMode.rawValue, value: ControlMode(bytes: [0x05])))
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }


    // MARK: AACapability
    
    public required init?(bytes: [UInt8]) {
        super.init(bytes: bytes)
    
        angle = extract(property: .angle)
        controlMode = extract(property: .controlMode)
    }
}