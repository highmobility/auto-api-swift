//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AATheftAlarm.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities


public final class AATheftAlarm: AACapability, AAPropertyIdentifying {

    /// Information about the introduction and last update of this capability.
    public enum API: AAAPICurrent {
        /// Level (version) of *AutoAPI* when `AATheftAlarm` was introduced to the spec.
        public static let intro: UInt8 = 4
    
        /// Level (version) of *AutoAPI* when `AATheftAlarm` was last updated.
        public static let updated: UInt8 = 12
    }


    /// Position of the last even relative to the vehicle.
    public enum EventType: String, CaseIterable, Codable, HMBytesConvertable {
    
        case idle = "idle"
        case frontLeft = "frontLeft"
        case frontMiddle = "frontMiddle"
        case frontRight = "frontRight"
        case right = "right"
        case rearRight = "rearRight"
        case rearMiddle = "rearMiddle"
        case rearLeft = "rearLeft"
        case left = "left"
        case unknown = "unknown"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .idle: return 0x00
            case .frontLeft: return 0x01
            case .frontMiddle: return 0x02
            case .frontRight: return 0x03
            case .right: return 0x04
            case .rearRight: return 0x05
            case .rearMiddle: return 0x06
            case .rearLeft: return 0x07
            case .left: return 0x08
            case .unknown: return 0x09
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .idle
            case 0x01: self = .frontLeft
            case 0x02: self = .frontMiddle
            case 0x03: self = .frontRight
            case 0x04: self = .right
            case 0x05: self = .rearRight
            case 0x06: self = .rearMiddle
            case 0x07: self = .rearLeft
            case 0x08: self = .left
            case 0x09: self = .unknown
            default: return nil
            }
        }
    }

    /// Level of impact for the last event.
    public enum LastEventLevel: String, CaseIterable, Codable, HMBytesConvertable {
    
        case low = "low"
        case medium = "medium"
        case high = "high"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .low: return 0x00
            case .medium: return 0x01
            case .high: return 0x02
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .low
            case 0x01: self = .medium
            case 0x02: self = .high
            default: return nil
            }
        }
    }

    /// Last warning reason enum.
    public enum LastWarningReason: String, CaseIterable, Codable, HMBytesConvertable {
    
        case noAlarm = "noAlarm"
        case basisAlarm = "basisAlarm"
        case doorFrontLeft = "doorFrontLeft"
        case doorFrontRight = "doorFrontRight"
        case doorRearLeft = "doorRearLeft"
        case doorRearRight = "doorRearRight"
        case hood = "hood"
        case trunk = "trunk"
        case commonAlmIn = "commonAlmIn"
        case panic = "panic"
        case glovebox = "glovebox"
        case centerBox = "centerBox"
        case rearBox = "rearBox"
        case sensorVta = "sensorVta"
        case its = "its"
        case itsSlv = "itsSlv"
        case tps = "tps"
        case horn = "horn"
        case holdCom = "holdCom"
        case remote = "remote"
        case unknown = "unknown"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .noAlarm: return 0x00
            case .basisAlarm: return 0x01
            case .doorFrontLeft: return 0x02
            case .doorFrontRight: return 0x03
            case .doorRearLeft: return 0x04
            case .doorRearRight: return 0x05
            case .hood: return 0x06
            case .trunk: return 0x07
            case .commonAlmIn: return 0x08
            case .panic: return 0x09
            case .glovebox: return 0x0a
            case .centerBox: return 0x0b
            case .rearBox: return 0x0c
            case .sensorVta: return 0x0d
            case .its: return 0x0e
            case .itsSlv: return 0x0f
            case .tps: return 0x10
            case .horn: return 0x11
            case .holdCom: return 0x12
            case .remote: return 0x13
            case .unknown: return 0x14
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .noAlarm
            case 0x01: self = .basisAlarm
            case 0x02: self = .doorFrontLeft
            case 0x03: self = .doorFrontRight
            case 0x04: self = .doorRearLeft
            case 0x05: self = .doorRearRight
            case 0x06: self = .hood
            case 0x07: self = .trunk
            case 0x08: self = .commonAlmIn
            case 0x09: self = .panic
            case 0x0a: self = .glovebox
            case 0x0b: self = .centerBox
            case 0x0c: self = .rearBox
            case 0x0d: self = .sensorVta
            case 0x0e: self = .its
            case 0x0f: self = .itsSlv
            case 0x10: self = .tps
            case 0x11: self = .horn
            case 0x12: self = .holdCom
            case 0x13: self = .remote
            case 0x14: self = .unknown
            default: return nil
            }
        }
    }

    /// Status enum.
    public enum Status: String, CaseIterable, Codable, HMBytesConvertable {
    
        case unarmed = "unarmed"
        case armed = "armed"
        case triggered = "triggered"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .unarmed: return 0x00
            case .armed: return 0x01
            case .triggered: return 0x02
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .unarmed
            case 0x01: self = .armed
            case 0x02: self = .triggered
            default: return nil
            }
        }
    }


    // MARK: Identifiers
    
    public class override var identifier: UInt16 { 0x0046 }


    /// Property identifiers for `AATheftAlarm`.
    public enum PropertyIdentifier: UInt8, CaseIterable {
        case status = 0x01
        case interiorProtectionStatus = 0x02
        case towProtectionStatus = 0x03
        case lastWarningReason = 0x04
        case lastEvent = 0x05
        case lastEventLevel = 0x06
        case eventType = 0x07
    }


    // MARK: Properties
    
    /// Position of the last even relative to the vehicle.
    public var eventType: AAProperty<EventType>?
    
    /// Interior protection sensor status.
    public var interiorProtectionStatus: AAProperty<AAActiveSelectedState>?
    
    /// Last event happening date.
    public var lastEvent: AAProperty<Date>?
    
    /// Level of impact for the last event.
    public var lastEventLevel: AAProperty<LastEventLevel>?
    
    /// Last warning reason value.
    public var lastWarningReason: AAProperty<LastWarningReason>?
    
    /// Status value.
    public var status: AAProperty<Status>?
    
    /// Tow protection sensor status.
    public var towProtectionStatus: AAProperty<AAActiveSelectedState>?


    // MARK: Getters
    
    /// Get `AATheftAlarm` state (all properties).
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getTheftAlarmState() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.get.rawValue.bytes
    }
    
    /// Get `AATheftAlarm` state's specific properties.
    ///
    /// - parameters:
    ///     - ids: List of property identifiers to request.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getTheftAlarmStateProperties(ids: PropertyIdentifier...) -> [UInt8] {
        getTheftAlarmState() + ids.map { $0.rawValue }
    }
    
    /// Get `AATheftAlarm` state properties availability.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getTheftAlarmStateAvailability() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.availability.rawValue.bytes
    }
    
    /// Get `AATheftAlarm` state's specific properties' availability.
    ///
    /// - parameters:
    ///     - ids: List of property identifiers to request availability for.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getTheftAlarmStatePropertiesAvailability(ids: PropertyIdentifier...) -> [UInt8] {
        getTheftAlarmStateAvailability() + ids.map { $0.rawValue }
    }


    // MARK: Setters
    
    /// Unarm or arm the theft alarm of the vehicle.
    /// 
    /// - parameters:
    ///     - status: Status value.
    ///
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func setTheftAlarm(status: Status) -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.status, value: status))
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }


    // MARK: AACapability
    
    public required init?(bytes: [UInt8]) {
        super.init(bytes: bytes)
    
        eventType = extract(property: .eventType)
        interiorProtectionStatus = extract(property: .interiorProtectionStatus)
        lastEvent = extract(property: .lastEvent)
        lastEventLevel = extract(property: .lastEventLevel)
        lastWarningReason = extract(property: .lastWarningReason)
        status = extract(property: .status)
        towProtectionStatus = extract(property: .towProtectionStatus)
    }
}