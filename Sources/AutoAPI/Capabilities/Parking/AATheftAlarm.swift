//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AATheftAlarm.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2020 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities


public final class AATheftAlarm: AACapability, AAPropertyIdentifying {

    /// Information about the introduction and last update of this capability.
    public enum API: AAAPICurrent {
        /// Level (version) of *AutoAPI* when `AATheftAlarm` was introduced to the spec.
        public static let intro: UInt8 = 4
    
        /// Level (version) of *AutoAPI* when `AATheftAlarm` was last updated.
        public static let updated: UInt8 = 12
    }


    /// Position of the last even relative to the vehicle.
    public enum EventType: UInt8, CaseIterable, Codable, HMBytesConvertable {
        case idle = 0x00
        case frontLeft = 0x01
        case frontMiddle = 0x02
        case frontRight = 0x03
        case right = 0x04
        case rearRight = 0x05
        case rearMiddle = 0x06
        case rearLeft = 0x07
        case left = 0x08
        case unknown = 0x09
    }

    /// Level of impact for the last event.
    public enum LastEventLevel: UInt8, CaseIterable, Codable, HMBytesConvertable {
        case low = 0x00
        case medium = 0x01
        case high = 0x02
    }

    /// Last warning reason enum.
    public enum LastWarningReason: UInt8, CaseIterable, Codable, HMBytesConvertable {
        case noAlarm = 0x00
        case basisAlarm = 0x01
        case doorFrontLeft = 0x02
        case doorFrontRight = 0x03
        case doorRearLeft = 0x04
        case doorRearRight = 0x05
        case hood = 0x06
        case trunk = 0x07
        case commonAlmIn = 0x08
        case panic = 0x09
        case glovebox = 0x0a
        case centerBox = 0x0b
        case rearBox = 0x0c
        case sensorVta = 0x0d
        case its = 0x0e
        case itsSlv = 0x0f
        case tps = 0x10
        case horn = 0x11
        case holdCom = 0x12
        case remote = 0x13
        case unknown = 0x14
    }

    /// Status enum.
    public enum Status: UInt8, CaseIterable, Codable, HMBytesConvertable {
        case unarmed = 0x00
        case armed = 0x01
        case triggered = 0x02
    }


    // MARK: Identifiers
    
    public class override var identifier: UInt16 { 0x0046 }


    /// Property identifiers for `AATheftAlarm`.
    public enum PropertyIdentifier: UInt8, CaseIterable {
        case status = 0x01
        case interiorProtectionStatus = 0x02
        case towProtectionStatus = 0x03
        case lastWarningReason = 0x04
        case lastEvent = 0x05
        case lastEventLevel = 0x06
        case eventType = 0x07
    }


    // MARK: Properties
    
    /// Position of the last even relative to the vehicle.
    public var eventType: AAProperty<EventType>?
    
    /// Interior protection sensor status.
    public var interiorProtectionStatus: AAProperty<AAActiveSelectedState>?
    
    /// Last event happening date.
    public var lastEvent: AAProperty<Date>?
    
    /// Level of impact for the last event.
    public var lastEventLevel: AAProperty<LastEventLevel>?
    
    /// Last warning reason value.
    public var lastWarningReason: AAProperty<LastWarningReason>?
    
    /// Status value.
    public var status: AAProperty<Status>?
    
    /// Tow protection sensor status.
    public var towProtectionStatus: AAProperty<AAActiveSelectedState>?


    // MARK: Getters
    
    /// Get `AATheftAlarm` state (all properties).
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getTheftAlarmState() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.get.rawValue.bytes
    }
    
    /// Get `AATheftAlarm` state's specific properties.
    ///
    /// - parameters:
    ///     - ids: List of property identifiers to request.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getTheftAlarmStateProperties(ids: PropertyIdentifier...) -> [UInt8] {
        getTheftAlarmState() + ids.map { $0.rawValue }
    }
    
    /// Get `AATheftAlarm` state properties availability.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getTheftAlarmStateAvailability() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.availability.rawValue.bytes
    }
    
    /// Get `AATheftAlarm` state's specific properties' availability.
    ///
    /// - parameters:
    ///     - ids: List of property identifiers to request availability for.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getTheftAlarmStatePropertiesAvailability(ids: PropertyIdentifier...) -> [UInt8] {
        getTheftAlarmStateAvailability() + ids.map { $0.rawValue }
    }


    // MARK: Setters
    
    /// Unarm or arm the theft alarm of the vehicle.
    /// 
    /// - parameters:
    ///     - status: Status value.
    ///
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func setTheftAlarm(status: Status) -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.status, value: status))
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }


    // MARK: AACapability
    
    public required init?(bytes: [UInt8]) {
        super.init(bytes: bytes)
    
        eventType = extract(property: .eventType)
        interiorProtectionStatus = extract(property: .interiorProtectionStatus)
        lastEvent = extract(property: .lastEvent)
        lastEventLevel = extract(property: .lastEventLevel)
        lastWarningReason = extract(property: .lastWarningReason)
        status = extract(property: .status)
        towProtectionStatus = extract(property: .towProtectionStatus)
    }
}