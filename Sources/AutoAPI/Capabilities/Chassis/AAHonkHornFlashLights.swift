//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AAHonkHornFlashLights.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities


public final class AAHonkHornFlashLights: AACapability, AAPropertyIdentifying {

    /// Information about the introduction and last update of this capability.
    public enum API: AAAPICurrent {
        /// Level (version) of *AutoAPI* when `AAHonkHornFlashLights` was introduced to the spec.
        public static let intro: UInt8 = 2
    
        /// Level (version) of *AutoAPI* when `AAHonkHornFlashLights` was last updated.
        public static let updated: UInt8 = 12
    }


    /// Flashers enum.
    public enum Flashers: String, CaseIterable, Codable, HMBytesConvertable {
    
        case inactive = "inactive"
        case emergencyFlasherActive = "emergencyFlasherActive"
        case leftFlasherActive = "leftFlasherActive"
        case rightFlasherActive = "rightFlasherActive"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .inactive: return 0x00
            case .emergencyFlasherActive: return 0x01
            case .leftFlasherActive: return 0x02
            case .rightFlasherActive: return 0x03
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .inactive
            case 0x01: self = .emergencyFlasherActive
            case 0x02: self = .leftFlasherActive
            case 0x03: self = .rightFlasherActive
            default: return nil
            }
        }
    }


    // MARK: Identifiers
    
    public class override var identifier: UInt16 { 0x0026 }


    /// Property identifiers for `AAHonkHornFlashLights`.
    public enum PropertyIdentifier: UInt8, CaseIterable {
        case flashers = 0x01
        case flashTimes = 0x03		// Non-state property (can't be retrieved)
        case emergencyFlashersState = 0x04		// Non-state property (can't be retrieved)
        case honkTime = 0x05		// Non-state property (can't be retrieved)
    }


    // MARK: Properties
    
    /// Flashers value.
    public var flashers: AAProperty<Flashers>?


    // MARK: Getters
    
    /// Get `AAHonkHornFlashLights` state (all properties).
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getFlashersState() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.get.rawValue.bytes
    }
    
    /// Get `AAHonkHornFlashLights` state properties availability.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getFlashersStateAvailability() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.availability.rawValue.bytes
    }


    // MARK: Setters
    
    /// Honk the horn and/or flash the blinker lights. This can be done simultaneously or just one action at the time. It is also possible to pass in how many times the lights should be flashed and how many seconds the horn should be honked.
    /// 
    /// - parameters:
    ///     - flashTimes: Number of times to flash the lights.
    ///     - honkTime: Time to honk the horn.
    ///
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func honkFlash(flashTimes: UInt8? = nil, honkTime: Measurement<UnitDuration>? = nil) -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.flashTimes, value: flashTimes))
        properties.append(AAProperty(id: PropertyIdentifier.honkTime, value: honkTime))
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }
    
    /// This activates or deactivates the emergency flashers of the vehicle, typically the blinkers to alarm other drivers.
    /// 
    /// - parameters:
    ///     - emergencyFlashersState: Emergency flasher state value.
    ///
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func activateDeactivateEmergencyFlasher(emergencyFlashersState: AAActiveState) -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.emergencyFlashersState, value: emergencyFlashersState))
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }


    // MARK: AACapability
    
    public required init?(bytes: [UInt8]) {
        super.init(bytes: bytes)
    
        flashers = extract(property: .flashers)
    }
}