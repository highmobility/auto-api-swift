//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AARooftopControl.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2020 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities



public final class AARooftopControl: AACapability, AAPropertyIdentifying {

    /// Information about the introduction and last update of this capability.
    public enum API: AAAPICurrent {
        /// Level (version) of *AutoAPI* when `AARooftopControl` was introduced to the spec.
        public static let intro: UInt8 = 3
    
        /// Level (version) of *AutoAPI* when `AARooftopControl` was last updated.
        public static let updated: UInt8 = 12
    }


    /// Convertible roof state enum.
    public enum ConvertibleRoofState: UInt8, CaseIterable, Codable, HMBytesConvertable {
        case closed = 0x00
        case open = 0x01
        case emergencyLocked = 0x02
        case closedSecured = 0x03
        case openSecured = 0x04
        case hardTopMounted = 0x05
        case intermediatePosition = 0x06
        case loadingPosition = 0x07
        case loadingPositionImmediate = 0x08
    }

    /// Sunroof event happened in case of rain.
    public enum SunroofRainEvent: UInt8, CaseIterable, Codable, HMBytesConvertable {
        case noEvent = 0x00
        case inStrokePositionBecauseOfRain = 0x01
        case automaticallyInStrokePosition = 0x02
    }

    /// Sunroof state enum.
    public enum SunroofState: UInt8, CaseIterable, Codable, HMBytesConvertable {
        case closed = 0x00
        case open = 0x01
        case intermediate = 0x02
    }

    /// Sunroof tilt state enum.
    public enum SunroofTiltState: UInt8, CaseIterable, Codable, HMBytesConvertable {
        case closed = 0x00
        case tilted = 0x01
        case halfTilted = 0x02
    }


    // MARK: Identifiers
    
    public class override var identifier: UInt16 { 0x0025 }


    /// Property identifiers for `AARooftopControl`.
    public enum PropertyIdentifier: UInt8, CaseIterable {
        case dimming = 0x01
        case position = 0x02
        case convertibleRoofState = 0x03
        case sunroofTiltState = 0x04
        case sunroofState = 0x05
        case sunroofRainEvent = 0x06
    }


    // MARK: Properties
    
    /// Convertible roof state value.
    public var convertibleRoofState: AAProperty<ConvertibleRoofState>?
    
    /// 1.0 (100%) is opaque, 0.0 (0%) is transparent.
    public var dimming: AAProperty<AAPercentage>?
    
    /// 1.0 (100%) is fully open, 0.0 (0%) is closed.
    public var position: AAProperty<AAPercentage>?
    
    /// Sunroof event happened in case of rain.
    public var sunroofRainEvent: AAProperty<SunroofRainEvent>?
    
    /// Sunroof state value.
    public var sunroofState: AAProperty<SunroofState>?
    
    /// Sunroof tilt state value.
    public var sunroofTiltState: AAProperty<SunroofTiltState>?


    // MARK: Getters
    
    /// Get `AARooftopControl` state (all properties).
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getRooftopState() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.get.rawValue.bytes
    }
    
    /// Get `AARooftopControl` state's specific properties.
    ///
    /// - parameters:
    ///     - ids: List of property identifiers to request.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getRooftopStateProperties(ids: PropertyIdentifier...) -> [UInt8] {
        getRooftopState() + ids.map { $0.rawValue }
    }
    
    /// Get `AARooftopControl` state properties availability.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getRooftopStateAvailability() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.availability.rawValue.bytes
    }
    
    /// Get `AARooftopControl` state's specific properties' availability.
    ///
    /// - parameters:
    ///     - ids: List of property identifiers to request availability for.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getRooftopStatePropertiesAvailability(ids: PropertyIdentifier...) -> [UInt8] {
        getRooftopStateAvailability() + ids.map { $0.rawValue }
    }


    // MARK: Setters
    
    /// Set the rooftop state.
    /// 
    /// - parameters:
    ///     - dimming: 1.0 (100%) is opaque, 0.0 (0%) is transparent.
    ///     - position: 1.0 (100%) is fully open, 0.0 (0%) is closed.
    ///     - convertibleRoofState: Convertible roof state value.
    ///     - sunroofTiltState: Sunroof tilt state value.
    ///     - sunroofState: Sunroof state value.
    ///
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func controlRooftop(convertibleRoofState: ConvertibleRoofState? = nil, dimming: AAPercentage? = nil, position: AAPercentage? = nil, sunroofState: SunroofState? = nil, sunroofTiltState: SunroofTiltState? = nil) -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.dimming, value: dimming))
        properties.append(AAProperty(id: PropertyIdentifier.position, value: position))
        properties.append(AAProperty(id: PropertyIdentifier.convertibleRoofState, value: convertibleRoofState))
        properties.append(AAProperty(id: PropertyIdentifier.sunroofTiltState, value: sunroofTiltState))
        properties.append(AAProperty(id: PropertyIdentifier.sunroofState, value: sunroofState))
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }


    // MARK: AACapability
    
    public required init?(bytes: [UInt8]) {
        super.init(bytes: bytes)
    
        convertibleRoofState = extract(property: .convertibleRoofState)
        dimming = extract(property: .dimming)
        position = extract(property: .position)
        sunroofRainEvent = extract(property: .sunroofRainEvent)
        sunroofState = extract(property: .sunroofState)
        sunroofTiltState = extract(property: .sunroofTiltState)
    }
}