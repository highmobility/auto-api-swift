//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AAWindscreen.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities


public final class AAWindscreen: AACapability, AAPropertyIdentifying {

    /// Information about the introduction and last update of this capability.
    public enum API: AAAPICurrent {
        /// Level (version) of *AutoAPI* when `AAWindscreen` was introduced to the spec.
        public static let intro: UInt8 = 4
    
        /// Level (version) of *AutoAPI* when `AAWindscreen` was last updated.
        public static let updated: UInt8 = 11
    }


    /// Windscreen damage enum.
    public enum WindscreenDamage: String, CaseIterable, Codable, HMBytesConvertable {
    
        case noImpactDetected = "noImpactDetected"
        case impactButNoDamageDetected = "impactButNoDamageDetected"
        case damageSmallerThan1Inch = "damageSmallerThan1Inch"
        case damageLargerThan1Inch = "damageLargerThan1Inch"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .noImpactDetected: return 0x00
            case .impactButNoDamageDetected: return 0x01
            case .damageSmallerThan1Inch: return 0x02
            case .damageLargerThan1Inch: return 0x03
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .noImpactDetected
            case 0x01: self = .impactButNoDamageDetected
            case 0x02: self = .damageSmallerThan1Inch
            case 0x03: self = .damageLargerThan1Inch
            default: return nil
            }
        }
    }

    /// Windscreen needs replacement enum.
    public enum WindscreenNeedsReplacement: String, CaseIterable, Codable, HMBytesConvertable {
    
        case unknown = "unknown"
        case noReplacementNeeded = "noReplacementNeeded"
        case replacementNeeded = "replacementNeeded"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .unknown: return 0x00
            case .noReplacementNeeded: return 0x01
            case .replacementNeeded: return 0x02
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .unknown
            case 0x01: self = .noReplacementNeeded
            case 0x02: self = .replacementNeeded
            default: return nil
            }
        }
    }

    /// Wipers intensity enum.
    public enum WipersIntensity: String, CaseIterable, Codable, HMBytesConvertable {
    
        case level0 = "level0"
        case level1 = "level1"
        case level2 = "level2"
        case level3 = "level3"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .level0: return 0x00
            case .level1: return 0x01
            case .level2: return 0x02
            case .level3: return 0x03
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .level0
            case 0x01: self = .level1
            case 0x02: self = .level2
            case 0x03: self = .level3
            default: return nil
            }
        }
    }

    /// Wipers status enum.
    public enum WipersStatus: String, CaseIterable, Codable, HMBytesConvertable {
    
        case inactive = "inactive"
        case active = "active"
        case automatic = "automatic"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .inactive: return 0x00
            case .active: return 0x01
            case .automatic: return 0x02
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .inactive
            case 0x01: self = .active
            case 0x02: self = .automatic
            default: return nil
            }
        }
    }


    // MARK: Identifiers
    
    public class override var identifier: UInt16 { 0x0042 }


    /// Property identifiers for `AAWindscreen`.
    public enum PropertyIdentifier: UInt8, CaseIterable {
        case wipersStatus = 0x01
        case wipersIntensity = 0x02
        case windscreenDamage = 0x03
        case windscreenZoneMatrix = 0x04
        case windscreenDamageZone = 0x05
        case windscreenNeedsReplacement = 0x06
        case windscreenDamageConfidence = 0x07
        case windscreenDamageDetectionTime = 0x08
    }


    // MARK: Properties
    
    /// Windscreen damage value.
    public var windscreenDamage: AAProperty<WindscreenDamage>?
    
    /// Confidence of damage detection, 0% if no impact detected.
    public var windscreenDamageConfidence: AAProperty<AAPercentage>?
    
    /// Windscreen damage detection date.
    public var windscreenDamageDetectionTime: AAProperty<Date>?
    
    /// Representing the position in the zone, seen from the inside of the vehicle (1-based index).
    public var windscreenDamageZone: AAProperty<AAZone>?
    
    /// Windscreen needs replacement value.
    public var windscreenNeedsReplacement: AAProperty<WindscreenNeedsReplacement>?
    
    /// Representing the size of the matrix, seen from the inside of the vehicle.
    public var windscreenZoneMatrix: AAProperty<AAZone>?
    
    /// Wipers intensity value.
    public var wipersIntensity: AAProperty<WipersIntensity>?
    
    /// Wipers status value.
    public var wipersStatus: AAProperty<WipersStatus>?


    // MARK: Getters
    
    /// Get `AAWindscreen` state (all properties).
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getWindscreenState() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.get.rawValue.bytes
    }
    
    /// Get `AAWindscreen` state's specific properties.
    ///
    /// - parameters:
    ///     - ids: List of property identifiers to request.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getWindscreenStateProperties(ids: PropertyIdentifier...) -> [UInt8] {
        getWindscreenState() + ids.map { $0.rawValue }
    }
    
    /// Get `AAWindscreen` state properties availability.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getWindscreenStateAvailability() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.availability.rawValue.bytes
    }
    
    /// Get `AAWindscreen` state's specific properties' availability.
    ///
    /// - parameters:
    ///     - ids: List of property identifiers to request availability for.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getWindscreenStatePropertiesAvailability(ids: PropertyIdentifier...) -> [UInt8] {
        getWindscreenStateAvailability() + ids.map { $0.rawValue }
    }


    // MARK: Setters
    
    /// Set the windscreen damage. This is for instance used to reset the glass damage or correct it. Damage confidence percentage is automatically set to either 0% or 100%.
    /// 
    /// - parameters:
    ///     - windscreenDamage: Windscreen damage value.
    ///     - windscreenDamageZone: Representing the position in the zone, seen from the inside of the vehicle (1-based index).
    ///
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func setWindscreenDamage(windscreenDamage: WindscreenDamage, windscreenDamageZone: AAZone? = nil) -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.windscreenDamage, value: windscreenDamage))
        properties.append(AAProperty(id: PropertyIdentifier.windscreenDamageZone, value: windscreenDamageZone))
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }
    
    /// Set if the windscreen needs replacement.
    /// 
    /// - parameters:
    ///     - windscreenNeedsReplacement: Windscreen needs replacement value.
    ///
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func setWindscreenReplacementNeeded(windscreenNeedsReplacement: WindscreenNeedsReplacement) -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.windscreenNeedsReplacement, value: windscreenNeedsReplacement))
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }
    
    /// Control the wipers.
    /// 
    /// - parameters:
    ///     - wipersStatus: Wipers status value.
    ///     - wipersIntensity: Wipers intensity value.
    ///
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func controlWipers(wipersIntensity: WipersIntensity? = nil, wipersStatus: WipersStatus) -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.wipersStatus, value: wipersStatus))
        properties.append(AAProperty(id: PropertyIdentifier.wipersIntensity, value: wipersIntensity))
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }


    // MARK: AACapability
    
    public required init?(bytes: [UInt8]) {
        super.init(bytes: bytes)
    
        windscreenDamage = extract(property: .windscreenDamage)
        windscreenDamageConfidence = extract(property: .windscreenDamageConfidence)
        windscreenDamageDetectionTime = extract(property: .windscreenDamageDetectionTime)
        windscreenDamageZone = extract(property: .windscreenDamageZone)
        windscreenNeedsReplacement = extract(property: .windscreenNeedsReplacement)
        windscreenZoneMatrix = extract(property: .windscreenZoneMatrix)
        wipersIntensity = extract(property: .wipersIntensity)
        wipersStatus = extract(property: .wipersStatus)
    }
}