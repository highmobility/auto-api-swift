//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AADiagnostics.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2020 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities



public final class AADiagnostics: AACapability, AAPropertyIdentifying {

    /// Information about the introduction and last update of this capability.
    public enum API: AAAPICurrent {
        /// Level (version) of *AutoAPI* when `AADiagnostics` was introduced to the spec.
        public static let intro: UInt8 = 3
    
        /// Level (version) of *AutoAPI* when `AADiagnostics` was last updated.
        public static let updated: UInt8 = 12
    }


    // MARK: Identifiers
    
    public class override var identifier: UInt16 { 0x0033 }


    /// Property identifiers for `AADiagnostics`.
    public enum PropertyIdentifier: UInt8, CaseIterable {
        case engineOilTemperature = 0x02
        case speed = 0x03
        case engineRPM = 0x04
        case fuelLevel = 0x05
        case estimatedRange = 0x06
        case washerFluidLevel = 0x09
        case batteryVoltage = 0x0b
        case adBlueLevel = 0x0c
        case distanceSinceReset = 0x0d
        case distanceSinceStart = 0x0e
        case fuelVolume = 0x0f
        case antiLockBraking = 0x10
        case engineCoolantTemperature = 0x11
        case engineTotalFuelConsumption = 0x13
        case brakeFluidLevel = 0x14
        case engineTorque = 0x15
        case engineLoad = 0x16
        case wheelBasedSpeed = 0x17
        case batteryLevel = 0x18
        case checkControlMessages = 0x19
        case tirePressures = 0x1a
        case tireTemperatures = 0x1b
        case wheelRPMs = 0x1c
        case troubleCodes = 0x1d
        case odometer = 0x1f
        case engineTotalOperatingTime = 0x20
        case tirePressureStatuses = 0x21
        case brakeLiningWearPreWarning = 0x22
        case engineOilLifeRemaining = 0x23
        case oemTroubleCodeValues = 0x24
        case dieselExhaustFluidRange = 0x25
        case dieselParticulateFilterSootLevel = 0x26
        case confirmedTroubleCodes = 0x27
        case dieselExhaustFilterStatus = 0x28
    }


    // MARK: Properties
    
    /// AdBlue level.
    public var adBlueLevel: AAProperty<Measurement<UnitVolume>>?
    
    /// Anti-lock braking system (ABS) value.
    public var antiLockBraking: AAProperty<AAActiveState>?
    
    /// Battery level in %, value between 0.0 and 1.0.
    public var batteryLevel: AAProperty<AAPercentage>?
    
    /// Battery voltage.
    public var batteryVoltage: AAProperty<Measurement<UnitElectricPotentialDifference>>?
    
    /// Brake fluid level value.
    public var brakeFluidLevel: AAProperty<AAFluidLevel>?
    
    /// Status of brake lining wear pre-warning.
    public var brakeLiningWearPreWarning: AAProperty<AAActiveState>?
    
    /// Check control messages value.
    public var checkControlMessages: [AAProperty<AACheckControlMessage>]?
    
    /// Confirmed trouble codes value.
    public var confirmedTroubleCodes: [AAProperty<AAConfirmedTroubleCode>]?
    
    /// Diesel exhaust filter status value.
    public var dieselExhaustFilterStatus: AAProperty<AADieselExhaustFilterStatus>?
    
    /// Distance remaining until diesel exhaust fluid is empty.
    public var dieselExhaustFluidRange: AAProperty<Measurement<UnitLength>>?
    
    /// Level of soot in diesel exhaust particulate filter.
    public var dieselParticulateFilterSootLevel: AAProperty<AAPercentage>?
    
    /// The distance driven since reset.
    public var distanceSinceReset: AAProperty<Measurement<UnitLength>>?
    
    /// The distance driven since trip start.
    public var distanceSinceStart: AAProperty<Measurement<UnitLength>>?
    
    /// Engine coolant temperature.
    public var engineCoolantTemperature: AAProperty<Measurement<UnitTemperature>>?
    
    /// Current engine load percentage between 0.0-1.0.
    public var engineLoad: AAProperty<AAPercentage>?
    
    /// Remaining life of engine oil which decreases over time.
    public var engineOilLifeRemaining: AAProperty<AAPercentage>?
    
    /// Engine oil temperature.
    public var engineOilTemperature: AAProperty<Measurement<UnitTemperature>>?
    
    /// Engine RPM (revolutions per minute).
    public var engineRPM: AAProperty<Measurement<UnitAngularVelocity>>?
    
    /// Current engine torque percentage between 0.0-1.0.
    public var engineTorque: AAProperty<AAPercentage>?
    
    /// The accumulated lifespan fuel consumption.
    public var engineTotalFuelConsumption: AAProperty<Measurement<UnitVolume>>?
    
    /// The accumulated time of engine operation.
    public var engineTotalOperatingTime: AAProperty<Measurement<UnitDuration>>?
    
    /// Estimated range (with combustion engine).
    public var estimatedRange: AAProperty<Measurement<UnitLength>>?
    
    /// Fuel level percentage between 0.0-1.0.
    public var fuelLevel: AAProperty<AAPercentage>?
    
    /// The fuel volume measured in liters.
    public var fuelVolume: AAProperty<Measurement<UnitVolume>>?
    
    /// The vehicle odometer value in a given units..
    public var odometer: AAProperty<Measurement<UnitLength>>?
    
    /// Additional OEM trouble codes.
    public var oemTroubleCodeValues: [AAProperty<AAOemTroubleCodeValue>]?
    
    /// The vehicle speed.
    public var speed: AAProperty<Measurement<UnitSpeed>>?
    
    /// Tire pressure statuses value.
    public var tirePressureStatuses: [AAProperty<AATirePressureStatus>]?
    
    /// Tire pressures value.
    public var tirePressures: [AAProperty<AATirePressure>]?
    
    /// Tire temperatures value.
    public var tireTemperatures: [AAProperty<AATireTemperature>]?
    
    /// Trouble codes value.
    public var troubleCodes: [AAProperty<AATroubleCode>]?
    
    /// Washer fluid level value.
    public var washerFluidLevel: AAProperty<AAFluidLevel>?
    
    /// The vehicle speed measured at the wheel base.
    public var wheelBasedSpeed: AAProperty<Measurement<UnitSpeed>>?
    
    /// Wheel RPMs value.
    public var wheelRPMs: [AAProperty<AAWheelRPM>]?
    
    // Deprecated
    
    /// The accumulated time of engine operation.
    ///
    /// - warning: This property is deprecated in favour of *engineTotalOperatingTime*.
    @available(*, deprecated, renamed: "engineTotalOperatingTime", message: "removed the unit from the name")
    public var engineTotalOperatingHours: AAProperty<Measurement<UnitDuration>>? {
        engineTotalOperatingTime
    }
    
    /// The vehicle mileage (odometer).
    ///
    /// - warning: This property is deprecated in favour of *odometer*.
    @available(*, deprecated, renamed: "odometer", message: "'mileage' is an incorrect term for this")
    public var mileage: AAProperty<Measurement<UnitLength>>? {
        odometer
    }
    
    /// The vehicle mileage (odometer) in meters.
    ///
    /// - warning: This property is deprecated in favour of *odometer*.
    @available(*, deprecated, renamed: "odometer", message: "'mileage' is an incorrect term for this")
    public var mileageMeters: AAProperty<Measurement<UnitLength>>? {
        odometer
    }


    // MARK: Getters
    
    /// Get `AADiagnostics` state (all properties).
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getDiagnosticsState() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.get.rawValue.bytes
    }
    
    /// Get `AADiagnostics` state's specific properties.
    ///
    /// - parameters:
    ///     - ids: List of property identifiers to request.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getDiagnosticsStateProperties(ids: PropertyIdentifier...) -> [UInt8] {
        getDiagnosticsState() + ids.map { $0.rawValue }
    }
    
    /// Get `AADiagnostics` state properties availability.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getDiagnosticsStateAvailability() -> [UInt8] {
        AAAutoAPI.protocolVersion.bytes + Self.identifier.bytes + AACommandType.availability.rawValue.bytes
    }
    
    /// Get `AADiagnostics` state's specific properties' availability.
    ///
    /// - parameters:
    ///     - ids: List of property identifiers to request availability for.
    ///
    /// - returns: The request as `[UInt8]` to send to the vehicle.
    public static func getDiagnosticsStatePropertiesAvailability(ids: PropertyIdentifier...) -> [UInt8] {
        getDiagnosticsStateAvailability() + ids.map { $0.rawValue }
    }


    // MARK: AACapability
    
    public required init?(bytes: [UInt8]) {
        super.init(bytes: bytes)
    
        adBlueLevel = extract(property: .adBlueLevel)
        antiLockBraking = extract(property: .antiLockBraking)
        batteryLevel = extract(property: .batteryLevel)
        batteryVoltage = extract(property: .batteryVoltage)
        brakeFluidLevel = extract(property: .brakeFluidLevel)
        brakeLiningWearPreWarning = extract(property: .brakeLiningWearPreWarning)
        checkControlMessages = extract(properties: .checkControlMessages)
        confirmedTroubleCodes = extract(properties: .confirmedTroubleCodes)
        dieselExhaustFilterStatus = extract(property: .dieselExhaustFilterStatus)
        dieselExhaustFluidRange = extract(property: .dieselExhaustFluidRange)
        dieselParticulateFilterSootLevel = extract(property: .dieselParticulateFilterSootLevel)
        distanceSinceReset = extract(property: .distanceSinceReset)
        distanceSinceStart = extract(property: .distanceSinceStart)
        engineCoolantTemperature = extract(property: .engineCoolantTemperature)
        engineLoad = extract(property: .engineLoad)
        engineOilLifeRemaining = extract(property: .engineOilLifeRemaining)
        engineOilTemperature = extract(property: .engineOilTemperature)
        engineRPM = extract(property: .engineRPM)
        engineTorque = extract(property: .engineTorque)
        engineTotalFuelConsumption = extract(property: .engineTotalFuelConsumption)
        engineTotalOperatingTime = extract(property: .engineTotalOperatingTime)
        estimatedRange = extract(property: .estimatedRange)
        fuelLevel = extract(property: .fuelLevel)
        fuelVolume = extract(property: .fuelVolume)
        odometer = extract(property: .odometer)
        oemTroubleCodeValues = extract(properties: .oemTroubleCodeValues)
        speed = extract(property: .speed)
        tirePressureStatuses = extract(properties: .tirePressureStatuses)
        tirePressures = extract(properties: .tirePressures)
        tireTemperatures = extract(properties: .tireTemperatures)
        troubleCodes = extract(properties: .troubleCodes)
        washerFluidLevel = extract(property: .washerFluidLevel)
        wheelBasedSpeed = extract(property: .wheelBasedSpeed)
        wheelRPMs = extract(properties: .wheelRPMs)
    }
}