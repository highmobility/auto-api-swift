//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AANotifications.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities


public final class AANotifications: AACapability, AAPropertyIdentifying {

    /// Information about the introduction and last update of this capability.
    public enum API: AAAPICurrent {
        /// Level (version) of *AutoAPI* when `AANotifications` was introduced to the spec.
        public static let intro: UInt8 = 4
    
        /// Level (version) of *AutoAPI* when `AANotifications` was last updated.
        public static let updated: UInt8 = 11
    }


    /// Clear enum.
    public enum Clear: String, CaseIterable, Codable, HMBytesConvertable {
    
        case clear = "clear"
    
    
        public var byteValue: UInt8 {
            switch self {
            case .clear: return 0x00
            }
        }
    
    
        // MARK: HMBytesConvertable
    
        public var bytes: [UInt8] {
            [byteValue]
        }
    
    
        public init?(bytes: [UInt8]) {
            guard let uint8 = UInt8(bytes: bytes) else {
                return nil
            }
    
            switch uint8 {
            case 0x00: self = .clear
            default: return nil
            }
        }
    }


    // MARK: Identifiers
    
    public class override var identifier: UInt16 { 0x0038 }


    /// Property identifiers for `AANotifications`.
    public enum PropertyIdentifier: UInt8, CaseIterable {
        case text = 0x01
        case actionItems = 0x02
        case activatedAction = 0x03
        case clear = 0x04
    }


    // MARK: Properties
    
    /// Action items value.
    public var actionItems: [AAProperty<AAActionItem>]?
    
    /// Identifier of the activated action.
    public var activatedAction: AAProperty<UInt8>?
    
    /// Clear value.
    public var clear: AAProperty<Clear>?
    
    /// Text for the notification.
    public var text: AAProperty<String>?


    // MARK: Setters
    
    /// Send a notification to the vehicle or smart device. The notification can have action items that the user can respond with.
    /// 
    /// - parameters:
    ///     - text: Text for the notification.
    ///     - actionItems: Action items value.
    ///
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func notification(actionItems: [AAActionItem]? = nil, text: String) -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.text, value: text))
        properties.append(contentsOf: actionItems?.compactMap { AAProperty(id: PropertyIdentifier.actionItems, value: $0) } ?? [])
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }
    
    /// Activate/choose a notification action.
    /// 
    /// - parameters:
    ///     - activatedAction: Identifier of the activated action.
    ///
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func action(activatedAction: UInt8) -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.activatedAction, value: activatedAction))
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }
    
    /// Clear the Notification in either the vehicle or device that has previously been sent, ignoring driver feedback.
    /// 
    /// - returns: Command as `[UInt8]` to send to the vehicle.
    public static func clearNotification() -> [UInt8] {
        var properties: [AAOpaqueProperty?] = []
    
        properties.append(AAProperty(id: PropertyIdentifier.clear.rawValue, value: Clear(bytes: [0x00])))
    
        let propertiesBytes = properties.compactMap { $0 }.sorted { $0.id < $1.id }.flatMap { $0.bytes }
    
        return setterHeader + propertiesBytes
    }


    // MARK: AACapability
    
    public required init?(bytes: [UInt8]) {
        super.init(bytes: bytes)
    
        actionItems = extract(properties: .actionItems)
        activatedAction = extract(property: .activatedAction)
        clear = extract(property: .clear)
        text = extract(property: .text)
    }
}