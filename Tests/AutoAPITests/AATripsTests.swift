//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AATripsTests.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright © 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities
import XCTest
@testable import AutoAPI


final class AATripsTests: XCTestCase {

    // MARK: State Properties
    
    func testType() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x01, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        XCTAssertEqual(capability.type?.value, TypeOf.single)
    }
    
    func testDriverName() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x02, 0x00, 0x0e, 0x01, 0x00, 0x0b, 0x48, 0x61, 0x72, 0x69, 0x20, 0x53, 0x65, 0x6c, 0x64, 0x6f, 0x6e]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        XCTAssertEqual(capability.driverName?.value, "Hari Seldon")
    }
    
    func testDescription() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x03, 0x00, 0x14, 0x01, 0x00, 0x11, 0x54, 0x6f, 0x20, 0x73, 0x61, 0x76, 0x65, 0x20, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x64]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        XCTAssertEqual(capability.description?.value, "To save humankind")
    }
    
    func testStartTime() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x04, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x72, 0xcc, 0x7e, 0x51, 0x90]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        XCTAssertNotNil(DateFormatter.hmFormatter.date(from: "2020-06-19T12:12:10.000Z"))
        XCTAssertEqual(capability.startTime?.value, DateFormatter.hmFormatter.date(from: "2020-06-19T12:12:10.000Z"))
    }
    
    func testEndTime() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x05, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x72, 0xcc, 0xb5, 0x40, 0x10]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        XCTAssertNotNil(DateFormatter.hmFormatter.date(from: "2020-06-19T13:12:10.000Z"))
        XCTAssertEqual(capability.endTime?.value, DateFormatter.hmFormatter.date(from: "2020-06-19T13:12:10.000Z"))
    }
    
    func testStartAddress() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x06, 0x00, 0x2e, 0x01, 0x00, 0x2b, 0x53, 0x6b, 0x61, 0x6c, 0x69, 0x74, 0x7a, 0x65, 0x72, 0x20, 0x53, 0x74, 0x72, 0x61, 0xc3, 0x9f, 0x65, 0x20, 0x36, 0x38, 0x2c, 0x20, 0x31, 0x30, 0x39, 0x39, 0x37, 0x20, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2c, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x79]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        XCTAssertEqual(capability.startAddress?.value, "Skalitzer Straße 68, 10997 Berlin, Germany")
    }
    
    func testEndAddress() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x07, 0x00, 0x2e, 0x01, 0x00, 0x2b, 0x53, 0x6b, 0x61, 0x6c, 0x69, 0x74, 0x7a, 0x65, 0x72, 0x20, 0x53, 0x74, 0x72, 0x61, 0xc3, 0x9f, 0x65, 0x20, 0x36, 0x38, 0x2c, 0x20, 0x31, 0x30, 0x39, 0x39, 0x37, 0x20, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2c, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x79]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        XCTAssertEqual(capability.endAddress?.value, "Skalitzer Straße 68, 10997 Berlin, Germany")
    }
    
    func testStartCoordinates() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x08, 0x00, 0x13, 0x01, 0x00, 0x10, 0x40, 0x4a, 0x40, 0x09, 0x0b, 0x41, 0x7c, 0xa2, 0x40, 0x2a, 0xe1, 0x22, 0xd9, 0x48, 0xdc, 0x12]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        XCTAssertEqual(capability.startCoordinates?.value?.bytes, AACoordinates(latitude: 52.500276, longitude: 13.439719).bytes)
    }
    
    func testEndCoordinates() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x09, 0x00, 0x13, 0x01, 0x00, 0x10, 0x40, 0x4a, 0x40, 0x09, 0x0b, 0x41, 0x7c, 0xa2, 0x40, 0x2a, 0xe1, 0x22, 0xd9, 0x48, 0xdc, 0x12]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        XCTAssertEqual(capability.endCoordinates?.value?.bytes, AACoordinates(latitude: 52.500276, longitude: 13.439719).bytes)
    }
    
    func testStartOdometer() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x0a, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x12, 0x04, 0x40, 0xc4, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        XCTAssertEqual(capability.startOdometer?.value, Measurement<UnitLength>(value: 10500.0, unit: .kilometers))
    }
    
    func testEndOdometer() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x0b, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x12, 0x04, 0x40, 0xc4, 0x97, 0x80, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        XCTAssertEqual(capability.endOdometer?.value, Measurement<UnitLength>(value: 10543.0, unit: .kilometers))
    }
    
    func testAverageFuelConsumption() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x0c, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x0f, 0x00, 0x40, 0x1d, 0x5c, 0x28, 0xf5, 0xc2, 0x8f, 0x5c]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        XCTAssertEqual(capability.averageFuelConsumption?.value, Measurement<UnitFuelEfficiency>(value: 7.34, unit: .litersPer100Kilometers))
    }
    
    func testDistance() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x0d, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x12, 0x04, 0x40, 0x45, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        XCTAssertEqual(capability.distance?.value, Measurement<UnitLength>(value: 43.0, unit: .kilometers))
    }
    
    func testStartAddressComponents() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x0e, 0x00, 0x0c, 0x01, 0x00, 0x09, 0x00, 0x00, 0x06, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x0e, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x01, 0x00, 0x07, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x79, 0x0e, 0x00, 0x08, 0x01, 0x00, 0x05, 0x02, 0x00, 0x02, 0x44, 0x45, 0x0e, 0x00, 0x0c, 0x01, 0x00, 0x09, 0x03, 0x00, 0x06, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x0e, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x04, 0x00, 0x05, 0x31, 0x30, 0x31, 0x31, 0x37, 0x0e, 0x00, 0x1a, 0x01, 0x00, 0x17, 0x05, 0x00, 0x14, 0x53, 0x6b, 0x61, 0x6c, 0x69, 0x74, 0x7a, 0x65, 0x72, 0x20, 0x53, 0x74, 0x72, 0x61, 0xc3, 0x9f, 0x65, 0x20, 0x36, 0x38, 0x0e, 0x00, 0x11, 0x01, 0x00, 0x0e, 0x06, 0x00, 0x0b, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x6e, 0x62, 0x75, 0x72, 0x67, 0x0e, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x07, 0x00, 0x07, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x79]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        guard let startAddressComponents = capability.startAddressComponents?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.startAddressComponents` values from `AATrips` capability")
        }
        
        XCTAssertTrue(startAddressComponents.contains { $0.bytes == AAAddressComponent(type: .city, value: "Berlin").bytes })
        XCTAssertTrue(startAddressComponents.contains { $0.bytes == AAAddressComponent(type: .country, value: "Germany").bytes })
        XCTAssertTrue(startAddressComponents.contains { $0.bytes == AAAddressComponent(type: .countryShort, value: "DE").bytes })
        XCTAssertTrue(startAddressComponents.contains { $0.bytes == AAAddressComponent(type: .district, value: "Berlin").bytes })
        XCTAssertTrue(startAddressComponents.contains { $0.bytes == AAAddressComponent(type: .postalCode, value: "10117").bytes })
        XCTAssertTrue(startAddressComponents.contains { $0.bytes == AAAddressComponent(type: .street, value: "Skalitzer Straße 68").bytes })
        XCTAssertTrue(startAddressComponents.contains { $0.bytes == AAAddressComponent(type: .stateProvince, value: "Brandenburg").bytes })
        XCTAssertTrue(startAddressComponents.contains { $0.bytes == AAAddressComponent(type: .other, value: "Germany").bytes })
    }
    
    func testEndAddressComponents() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x6a, 0x01, 0x0f, 0x00, 0x0c, 0x01, 0x00, 0x09, 0x00, 0x00, 0x06, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x0f, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x01, 0x00, 0x07, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x79, 0x0f, 0x00, 0x08, 0x01, 0x00, 0x05, 0x02, 0x00, 0x02, 0x44, 0x45, 0x0f, 0x00, 0x0c, 0x01, 0x00, 0x09, 0x03, 0x00, 0x06, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x0f, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x04, 0x00, 0x05, 0x31, 0x30, 0x31, 0x31, 0x37, 0x0f, 0x00, 0x1a, 0x01, 0x00, 0x17, 0x05, 0x00, 0x14, 0x53, 0x6b, 0x61, 0x6c, 0x69, 0x74, 0x7a, 0x65, 0x72, 0x20, 0x53, 0x74, 0x72, 0x61, 0xc3, 0x9f, 0x65, 0x20, 0x36, 0x38, 0x0f, 0x00, 0x11, 0x01, 0x00, 0x0e, 0x06, 0x00, 0x0b, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x6e, 0x62, 0x75, 0x72, 0x67, 0x0f, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x07, 0x00, 0x07, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x79]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATrips else {
            return XCTFail("Could not parse bytes as `AATrips`")
        }
        
        guard let endAddressComponents = capability.endAddressComponents?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.endAddressComponents` values from `AATrips` capability")
        }
        
        XCTAssertTrue(endAddressComponents.contains { $0.bytes == AAAddressComponent(type: .city, value: "Berlin").bytes })
        XCTAssertTrue(endAddressComponents.contains { $0.bytes == AAAddressComponent(type: .country, value: "Germany").bytes })
        XCTAssertTrue(endAddressComponents.contains { $0.bytes == AAAddressComponent(type: .countryShort, value: "DE").bytes })
        XCTAssertTrue(endAddressComponents.contains { $0.bytes == AAAddressComponent(type: .district, value: "Berlin").bytes })
        XCTAssertTrue(endAddressComponents.contains { $0.bytes == AAAddressComponent(type: .postalCode, value: "10117").bytes })
        XCTAssertTrue(endAddressComponents.contains { $0.bytes == AAAddressComponent(type: .street, value: "Skalitzer Straße 68").bytes })
        XCTAssertTrue(endAddressComponents.contains { $0.bytes == AAAddressComponent(type: .stateProvince, value: "Brandenburg").bytes })
        XCTAssertTrue(endAddressComponents.contains { $0.bytes == AAAddressComponent(type: .other, value: "Germany").bytes })
    }


    // MARK: Identifiers
    
    func testCapabilityIdentifier() {
        XCTAssertEqual(AATrips.identifier, 0x006A)
    }
    
    func testPropeertyIdentifiers() {
        XCTAssertEqual(AATrips.PropertyIdentifier.type.rawValue, 0x01)
        XCTAssertEqual(AATrips.PropertyIdentifier.driverName.rawValue, 0x02)
        XCTAssertEqual(AATrips.PropertyIdentifier.description.rawValue, 0x03)
        XCTAssertEqual(AATrips.PropertyIdentifier.startTime.rawValue, 0x04)
        XCTAssertEqual(AATrips.PropertyIdentifier.endTime.rawValue, 0x05)
        XCTAssertEqual(AATrips.PropertyIdentifier.startAddress.rawValue, 0x06)
        XCTAssertEqual(AATrips.PropertyIdentifier.endAddress.rawValue, 0x07)
        XCTAssertEqual(AATrips.PropertyIdentifier.startCoordinates.rawValue, 0x08)
        XCTAssertEqual(AATrips.PropertyIdentifier.endCoordinates.rawValue, 0x09)
        XCTAssertEqual(AATrips.PropertyIdentifier.startOdometer.rawValue, 0x0a)
        XCTAssertEqual(AATrips.PropertyIdentifier.endOdometer.rawValue, 0x0b)
        XCTAssertEqual(AATrips.PropertyIdentifier.averageFuelConsumption.rawValue, 0x0c)
        XCTAssertEqual(AATrips.PropertyIdentifier.distance.rawValue, 0x0d)
        XCTAssertEqual(AATrips.PropertyIdentifier.startAddressComponents.rawValue, 0x0e)
        XCTAssertEqual(AATrips.PropertyIdentifier.endAddressComponents.rawValue, 0x0f)
    }
}