//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AAHistoricalTests.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities
import XCTest
@testable import AutoAPI


final class AAHistoricalTests: XCTestCase {

    // MARK: State Properties
    
    func testStates() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x12, 0x01, 0x01, 0x00, 0x2c, 0x01, 0x00, 0x29, 0x0c, 0x00, 0x20, 0x01, 0x06, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x01, 0x04, 0x00, 0x05, 0x01, 0x00, 0x02, 0x02, 0x01, 0xa2, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x59, 0x89, 0x38, 0xe7, 0x88, 0x01, 0x00, 0x43, 0x01, 0x00, 0x40, 0x0c, 0x00, 0x23, 0x01, 0x0b, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01, 0x0c, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00, 0x18, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x14, 0x02, 0x40, 0x41, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x12, 0x04, 0x40, 0x81, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x59, 0x89, 0x38, 0xe7, 0x88]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAHistorical else {
            return XCTFail("Could not parse bytes as `AAHistorical`")
        }
        
        guard let states = capability.states?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.states` values from `AAHistorical` capability")
        }
        
        XCTAssertNotNil(AADoors(bytes: [0x0c, 0x00, 0x20, 0x01, 0x06, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x01, 0x04, 0x00, 0x05, 0x01, 0x00, 0x02, 0x02, 0x01, 0xa2, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x59, 0x89, 0x38, 0xe7, 0x88]))
        XCTAssertTrue(states.contains { $0.bytes == AADoors(bytes: [0x0c, 0x00, 0x20, 0x01, 0x06, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x01, 0x04, 0x00, 0x05, 0x01, 0x00, 0x02, 0x02, 0x01, 0xa2, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x59, 0x89, 0x38, 0xe7, 0x88])?.bytes })
        XCTAssertNotNil(AACharging(bytes: [0x0c, 0x00, 0x23, 0x01, 0x0b, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01, 0x0c, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00, 0x18, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x14, 0x02, 0x40, 0x41, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x12, 0x04, 0x40, 0x81, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x59, 0x89, 0x38, 0xe7, 0x88]))
        XCTAssertTrue(states.contains { $0.bytes == AACharging(bytes: [0x0c, 0x00, 0x23, 0x01, 0x0b, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01, 0x0c, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00, 0x18, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x14, 0x02, 0x40, 0x41, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x12, 0x04, 0x40, 0x81, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x59, 0x89, 0x38, 0xe7, 0x88])?.bytes })
    }


    // MARK: Non-state or Deprecated Properties
    
    func testCapabilityID() {
        let bytes: [UInt8] = [0x02, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x60]
        
        guard let property: AAProperty<UInt16> = AAOpaqueProperty(bytes: bytes)?.property() else {
            return XCTFail("Could not create a property for `.capabilityID`")
        }
        
        XCTAssertEqual(property.value, 96)
    }
    
    func testStartDate() {
        let bytes: [UInt8] = [0x03, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x6d, 0xa6, 0x52, 0x43, 0x00]
        
        guard let property: AAProperty<Date> = AAOpaqueProperty(bytes: bytes)?.property() else {
            return XCTFail("Could not create a property for `.startDate`")
        }
        
        XCTAssertNotNil(DateFormatter.hmFormatter.date(from: "2019-10-07T13:04:32.000Z"))
        XCTAssertEqual(property.value, DateFormatter.hmFormatter.date(from: "2019-10-07T13:04:32.000Z"))
    }
    
    func testEndDate() {
        let bytes: [UInt8] = [0x04, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x6d, 0x71, 0xe2, 0xc4, 0xf0]
        
        guard let property: AAProperty<Date> = AAOpaqueProperty(bytes: bytes)?.property() else {
            return XCTFail("Could not create a property for `.endDate`")
        }
        
        XCTAssertNotNil(DateFormatter.hmFormatter.date(from: "2019-09-27T08:42:30.000Z"))
        XCTAssertEqual(property.value, DateFormatter.hmFormatter.date(from: "2019-09-27T08:42:30.000Z"))
    }


    // MARK: Setters
    
    func testRequestStates() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x12, 0x01, 0x02, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x60, 0x03, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x6d, 0xa6, 0x52, 0x43, 0x00, 0x04, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x6d, 0x71, 0xe2, 0xc4, 0xf0]
        let setterBytes = AAHistorical.requestStates(capabilityID: 96, startDate: DateFormatter.hmFormatter.date(from: "2019-10-07T13:04:32.000Z")!, endDate: DateFormatter.hmFormatter.date(from: "2019-09-27T08:42:30.000Z")!)
        
        XCTAssertEqual(bytes, setterBytes)
    }
    
    func testGetTrips() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x12, 0x01, 0x02, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x6a, 0x03, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x6d, 0xa6, 0x52, 0x43, 0x00, 0x04, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x6d, 0x71, 0xe2, 0xc4, 0xf0]
        let setterBytes = AAHistorical.getTrips(startDate: DateFormatter.hmFormatter.date(from: "2019-10-07T13:04:32.000Z")!, endDate: DateFormatter.hmFormatter.date(from: "2019-09-27T08:42:30.000Z")!)
        
        XCTAssertEqual(bytes, setterBytes)
    }
    
    func testGetChargingSessions() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x12, 0x01, 0x02, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x6d, 0x03, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x6d, 0xa6, 0x52, 0x43, 0x00, 0x04, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x6d, 0x71, 0xe2, 0xc4, 0xf0]
        let setterBytes = AAHistorical.getChargingSessions(startDate: DateFormatter.hmFormatter.date(from: "2019-10-07T13:04:32.000Z")!, endDate: DateFormatter.hmFormatter.date(from: "2019-09-27T08:42:30.000Z")!)
        
        XCTAssertEqual(bytes, setterBytes)
    }


    // MARK: Identifiers
    
    func testCapabilityIdentifier() {
        XCTAssertEqual(AAHistorical.identifier, 0x0012)
    }
    
    func testPropeertyIdentifiers() {
        XCTAssertEqual(AAHistorical.PropertyIdentifier.states.rawValue, 0x01)
        XCTAssertEqual(AAHistorical.PropertyIdentifier.capabilityID.rawValue, 0x02)
        XCTAssertEqual(AAHistorical.PropertyIdentifier.startDate.rawValue, 0x03)
        XCTAssertEqual(AAHistorical.PropertyIdentifier.endDate.rawValue, 0x04)
    }
}
