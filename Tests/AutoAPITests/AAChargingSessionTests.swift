//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AAChargingSessionTests.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright © 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities
import XCTest
@testable import AutoAPI


final class AAChargingSessionTests: XCTestCase {

    // MARK: State Properties
    
    func testPublicChargingPoints() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x01, 0x00, 0x52, 0x01, 0x00, 0x4f, 0x00, 0x06, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x00, 0x05, 0x31, 0x30, 0x39, 0x39, 0x37, 0x00, 0x14, 0x53, 0x6b, 0x61, 0x6c, 0x69, 0x74, 0x7a, 0x65, 0x72, 0x20, 0x53, 0x74, 0x72, 0x61, 0xc3, 0x9f, 0x65, 0x20, 0x36, 0x38, 0x00, 0x28, 0x48, 0x69, 0x67, 0x68, 0x20, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x4c, 0x6f, 0x77, 0x20, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x20, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x01, 0x00, 0x3d, 0x01, 0x00, 0x3a, 0x00, 0x07, 0x54, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x6e, 0x00, 0x05, 0x31, 0x30, 0x31, 0x33, 0x30, 0x00, 0x07, 0x48, 0x61, 0x72, 0x6a, 0x75, 0x20, 0x36, 0x00, 0x1f, 0x46, 0x72, 0x65, 0x65, 0x20, 0x57, 0x69, 0x66, 0x69, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        guard let publicChargingPoints = capability.publicChargingPoints?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.publicChargingPoints` values from `AAChargingSession` capability")
        }
        
        XCTAssertTrue(publicChargingPoints.contains { $0.bytes == AAChargingPoint(city: "Berlin", postalCode: "10997", street: "Skalitzer Straße 68", provider: "High Energy Low Prices Charging Provider").bytes })
        XCTAssertTrue(publicChargingPoints.contains { $0.bytes == AAChargingPoint(city: "Tallinn", postalCode: "10130", street: "Harju 6", provider: "Free Wifi and Charging Provider").bytes })
    }
    
    func testDisplayedStateOfCharge() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x02, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x3f, 0xd2, 0x8f, 0x5c, 0x28, 0xf5, 0xc2, 0x8f]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        XCTAssertEqual(capability.displayedStateOfCharge?.value, 0.29)
    }
    
    func testDisplayedStartStateOfCharge() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x03, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x3f, 0xbe, 0xb8, 0x51, 0xeb, 0x85, 0x1e, 0xb8]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        XCTAssertEqual(capability.displayedStartStateOfCharge?.value, 0.12)
    }
    
    func testBusinessErrors() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x04, 0x00, 0x24, 0x01, 0x00, 0x21, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x04, 0x00, 0x15, 0x01, 0x00, 0x12, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x75, 0x67, 0x2d, 0x69, 0x6e]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        guard let businessErrors = capability.businessErrors?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.businessErrors` values from `AAChargingSession` capability")
        }
        
        XCTAssertTrue(businessErrors.contains { $0 == "Please check the charging station" })
        XCTAssertTrue(businessErrors.contains { $0 == "Repeat the plug-in" })
    }
    
    func testTimeZone() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x05, 0x00, 0x10, 0x01, 0x00, 0x0d, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x2f, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        XCTAssertEqual(capability.timeZone?.value, "Europe/Berlin")
    }
    
    func testStartTime() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x06, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x78, 0x1b, 0xcb, 0xb9, 0x4d]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        XCTAssertNotNil(DateFormatter.hmFormatter.date(from: "2021-03-10T11:00:39.373Z"))
        XCTAssertEqual(capability.startTime?.value, DateFormatter.hmFormatter.date(from: "2021-03-10T11:00:39.373Z"))
    }
    
    func testEndTime() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x07, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x78, 0x1b, 0xc9, 0xfd, 0x3e]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        XCTAssertNotNil(DateFormatter.hmFormatter.date(from: "2021-03-10T10:58:45.694Z"))
        XCTAssertEqual(capability.endTime?.value, DateFormatter.hmFormatter.date(from: "2021-03-10T10:58:45.694Z"))
    }
    
    func testTotalChargingDuration() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x08, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x07, 0x00, 0x40, 0xc1, 0x1e, 0x80, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        XCTAssertEqual(capability.totalChargingDuration?.value, Measurement<UnitDuration>(value: 8765.0, unit: .seconds))
    }
    
    func testCalculatedEnergyCharged() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x09, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x0c, 0x04, 0x40, 0x0c, 0x89, 0x37, 0x4b, 0xc6, 0xa7, 0xf0]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        XCTAssertEqual(capability.calculatedEnergyCharged?.value, Measurement<UnitEnergy>(value: 3.567, unit: .kilowattHours))
    }
    
    func testEnergyCharged() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x0a, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x0c, 0x04, 0x40, 0x02, 0xc2, 0x8f, 0x5c, 0x28, 0xf5, 0xc3]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        XCTAssertEqual(capability.energyCharged?.value, Measurement<UnitEnergy>(value: 2.345, unit: .kilowattHours))
    }
    
    func testPreconditioningState() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x0b, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        XCTAssertEqual(capability.preconditioningState?.value, AAActiveState.active)
    }
    
    func testOdometer() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x0c, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x12, 0x04, 0x40, 0xa0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        XCTAssertEqual(capability.odometer?.value, Measurement<UnitLength>(value: 2050.0, unit: .kilometers))
    }
    
    func testChargingCost() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x0d, 0x00, 0x20, 0x01, 0x00, 0x1d, 0x00, 0x03, 0x45, 0x55, 0x52, 0x40, 0x02, 0x34, 0xea, 0xb7, 0x62, 0x65, 0x22, 0x3f, 0xe2, 0x26, 0x80, 0x9d, 0x49, 0x51, 0x83, 0x40, 0x02, 0x34, 0xea, 0xb7, 0x62, 0x65, 0x22]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        XCTAssertEqual(capability.chargingCost?.value?.bytes, AAChargingCost(currency: "EUR", calculatedChargingCost: 2.2758383109, calculatedSavings: 0.5672, simulatedImmediateChargingCost: 2.2758383109).bytes)
    }
    
    func testLocation() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x6d, 0x01, 0x0e, 0x00, 0x4e, 0x01, 0x00, 0x4b, 0x00, 0x06, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x00, 0x2b, 0x53, 0x6b, 0x61, 0x6c, 0x69, 0x74, 0x7a, 0x65, 0x72, 0x20, 0x53, 0x74, 0x72, 0x61, 0xc3, 0x9f, 0x65, 0x20, 0x36, 0x38, 0x2c, 0x20, 0x31, 0x30, 0x39, 0x39, 0x37, 0x20, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2c, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x79, 0x00, 0x14, 0x53, 0x6b, 0x61, 0x6c, 0x69, 0x74, 0x7a, 0x65, 0x72, 0x20, 0x53, 0x74, 0x72, 0x61, 0xc3, 0x9f, 0x65, 0x20, 0x36, 0x38]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAChargingSession else {
            return XCTFail("Could not parse bytes as `AAChargingSession`")
        }
        
        XCTAssertEqual(capability.location?.value?.bytes, AAChargingLocation(municipality: "Berlin", formattedAddress: "Skalitzer Straße 68, 10997 Berlin, Germany", streetAddress: "Skalitzer Straße 68").bytes)
    }


    // MARK: Identifiers
    
    func testCapabilityIdentifier() {
        XCTAssertEqual(AAChargingSession.identifier, 0x006D)
    }
    
    func testPropeertyIdentifiers() {
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.publicChargingPoints.rawValue, 0x01)
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.displayedStateOfCharge.rawValue, 0x02)
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.displayedStartStateOfCharge.rawValue, 0x03)
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.businessErrors.rawValue, 0x04)
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.timeZone.rawValue, 0x05)
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.startTime.rawValue, 0x06)
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.endTime.rawValue, 0x07)
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.totalChargingDuration.rawValue, 0x08)
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.calculatedEnergyCharged.rawValue, 0x09)
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.energyCharged.rawValue, 0x0a)
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.preconditioningState.rawValue, 0x0b)
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.odometer.rawValue, 0x0c)
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.chargingCost.rawValue, 0x0d)
        XCTAssertEqual(AAChargingSession.PropertyIdentifier.location.rawValue, 0x0e)
    }
}
