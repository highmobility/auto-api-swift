//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AAMaintenanceTests.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities
import XCTest
@testable import AutoAPI


final class AAMaintenanceTests: XCTestCase {

    // MARK: State Properties
    
    func testCbsReportsCount() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x03, 0x00, 0x04, 0x01, 0x00, 0x01, 0x03]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertEqual(capability.cbsReportsCount?.value, 3)
    }
    
    func testTeleserviceAvailability() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x05, 0x00, 0x04, 0x01, 0x00, 0x01, 0x02]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertEqual(capability.teleserviceAvailability?.value, TeleserviceAvailability.successful)
    }
    
    func testServiceDistanceThreshold() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x06, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x12, 0x04, 0x40, 0xb3, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertEqual(capability.serviceDistanceThreshold?.value, Measurement<UnitLength>(value: 5000.0, unit: .kilometers))
    }
    
    func testServiceTimeThreshold() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x07, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x07, 0x04, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertEqual(capability.serviceTimeThreshold?.value, Measurement<UnitDuration>(value: 4, unit: .weeks))
    }
    
    func testAutomaticTeleserviceCallDate() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x08, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x67, 0x40, 0x58, 0xf1, 0x30]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertNotNil(DateFormatter.hmFormatter.date(from: "2018-11-23T11:33:50.000Z"))
        XCTAssertEqual(capability.automaticTeleserviceCallDate?.value, DateFormatter.hmFormatter.date(from: "2018-11-23T11:33:50.000Z"))
    }
    
    func testTeleserviceBatteryCallDate() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x09, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x67, 0x40, 0x24, 0xc1, 0xd0]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertNotNil(DateFormatter.hmFormatter.date(from: "2018-11-23T10:36:50.000Z"))
        XCTAssertEqual(capability.teleserviceBatteryCallDate?.value, DateFormatter.hmFormatter.date(from: "2018-11-23T10:36:50.000Z"))
    }
    
    func testNextInspectionDate() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x0a, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x66, 0xa1, 0x5d, 0x20, 0xd8]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertNotNil(DateFormatter.hmFormatter.date(from: "2018-10-23T14:38:47.000Z"))
        XCTAssertEqual(capability.nextInspectionDate?.value, DateFormatter.hmFormatter.date(from: "2018-10-23T14:38:47.000Z"))
    }
    
    func testConditionBasedServices() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x0b, 0x00, 0x44, 0x01, 0x00, 0x41, 0x07, 0xe3, 0x05, 0x00, 0x03, 0x00, 0x00, 0x0b, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x20, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x00, 0x2c, 0x4e, 0x65, 0x78, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x61, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2e]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        guard let conditionBasedServices = capability.conditionBasedServices?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.conditionBasedServices` values from `AAMaintenance` capability")
        }
        
        XCTAssertTrue(conditionBasedServices.contains { $0.bytes == AAConditionBasedService(year: 2019, month: 5, id: 3, dueStatus: .ok, text: "Brake fluid", description: "Next change at specified date at the latest.").bytes })
    }
    
    func testBrakeFluidChangeDate() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x0c, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x67, 0x7c, 0x63, 0xd2, 0x80]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertNotNil(DateFormatter.hmFormatter.date(from: "2018-12-05T03:22:56.000Z"))
        XCTAssertEqual(capability.brakeFluidChangeDate?.value, DateFormatter.hmFormatter.date(from: "2018-12-05T03:22:56.000Z"))
    }
    
    func testTimeToNextService() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x0d, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x07, 0x03, 0x40, 0x7f, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertEqual(capability.timeToNextService?.value, Measurement<UnitDuration>(value: 501.0, unit: .days))
    }
    
    func testDistanceToNextService() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x0e, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x12, 0x04, 0x40, 0xac, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertEqual(capability.distanceToNextService?.value, Measurement<UnitLength>(value: 3681.0, unit: .kilometers))
    }
    
    func testTimeToExhaustInspection() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x0f, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x07, 0x05, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertEqual(capability.timeToExhaustInspection?.value, Measurement<UnitDuration>(value: 5.0, unit: .months))
    }
    
    func testLastECall() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x10, 0x00, 0x0b, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01, 0x67, 0x7c, 0x63, 0xd2, 0x80]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertNotNil(DateFormatter.hmFormatter.date(from: "2018-12-05T03:22:56.000Z"))
        XCTAssertEqual(capability.lastECall?.value, DateFormatter.hmFormatter.date(from: "2018-12-05T03:22:56.000Z"))
    }
    
    func testDistanceToNextOilService() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x11, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x12, 0x04, 0x40, 0x80, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertEqual(capability.distanceToNextOilService?.value, Measurement<UnitLength>(value: 525.6, unit: .kilometers))
    }
    
    func testTimeToNextOilService() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x01, 0x12, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x07, 0x03, 0x40, 0x50, 0xb3, 0x33, 0x33, 0x33, 0x33, 0x33]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAMaintenance else {
            return XCTFail("Could not parse bytes as `AAMaintenance`")
        }
        
        XCTAssertEqual(capability.timeToNextOilService?.value, Measurement<UnitDuration>(value: 66.8, unit: .days))
    }


    // MARK: Non-state or Deprecated Properties
    
    func testDaysToNextService() {
        let bytes: [UInt8] = [0x01, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x07, 0x03, 0x40, 0x7f, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let property: AAProperty<Measurement<UnitDuration>> = AAOpaqueProperty(bytes: bytes)?.property() else {
            return XCTFail("Could not create a property for `.daysToNextService`")
        }
        
        XCTAssertEqual(property.value, Measurement<UnitDuration>(value: 501.0, unit: .days))
    }
    
    func testKilometersToNextService() {
        let bytes: [UInt8] = [0x02, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x12, 0x04, 0x40, 0xac, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let property: AAProperty<Measurement<UnitLength>> = AAOpaqueProperty(bytes: bytes)?.property() else {
            return XCTFail("Could not create a property for `.kilometersToNextService`")
        }
        
        XCTAssertEqual(property.value, Measurement<UnitLength>(value: 3681.0, unit: .kilometers))
    }
    
    func testMonthsToExhaustInspection() {
        let bytes: [UInt8] = [0x04, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x07, 0x05, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let property: AAProperty<Measurement<UnitDuration>> = AAOpaqueProperty(bytes: bytes)?.property() else {
            return XCTFail("Could not create a property for `.monthsToExhaustInspection`")
        }
        
        XCTAssertEqual(property.value, Measurement<UnitDuration>(value: 5.0, unit: .months))
    }


    // MARK: Getters
    
    func testGetMaintenanceState() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x00]
        
        XCTAssertEqual(bytes, AAMaintenance.getMaintenanceState())
    }
    
    func testGetMaintenanceStateAvailability() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x02]
        
        XCTAssertEqual(bytes, AAMaintenance.getMaintenanceStateAvailability())
    }
    
    func testGetMaintenanceStateProperties() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x00, 0x03]
        let getterBytes = AAMaintenance.getMaintenanceStateProperties(ids: .cbsReportsCount)
        
        XCTAssertEqual(bytes, getterBytes)
    }
    
    func testGetMaintenanceStatePropertiesAvailability() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x34, 0x02, 0x03]
        let getterBytes = AAMaintenance.getMaintenanceStatePropertiesAvailability(ids: .cbsReportsCount)
        
        XCTAssertEqual(bytes, getterBytes)
    }


    // MARK: Identifiers
    
    func testCapabilityIdentifier() {
        XCTAssertEqual(AAMaintenance.identifier, 0x0034)
    }
    
    func testPropeertyIdentifiers() {
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.cbsReportsCount.rawValue, 0x03)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.teleserviceAvailability.rawValue, 0x05)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.serviceDistanceThreshold.rawValue, 0x06)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.serviceTimeThreshold.rawValue, 0x07)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.automaticTeleserviceCallDate.rawValue, 0x08)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.teleserviceBatteryCallDate.rawValue, 0x09)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.nextInspectionDate.rawValue, 0x0a)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.conditionBasedServices.rawValue, 0x0b)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.brakeFluidChangeDate.rawValue, 0x0c)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.timeToNextService.rawValue, 0x0d)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.distanceToNextService.rawValue, 0x0e)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.timeToExhaustInspection.rawValue, 0x0f)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.lastECall.rawValue, 0x10)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.distanceToNextOilService.rawValue, 0x11)
        XCTAssertEqual(AAMaintenance.PropertyIdentifier.timeToNextOilService.rawValue, 0x12)
    }
}
