//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AANaviDestinationTests.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities
import XCTest
@testable import AutoAPI


final class AANaviDestinationTests: XCTestCase {

    // MARK: State Properties
    
    func testCoordinates() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x31, 0x01, 0x01, 0x00, 0x13, 0x01, 0x00, 0x10, 0x40, 0x4a, 0x42, 0x8f, 0x9f, 0x44, 0xd4, 0x45, 0x40, 0x2a, 0xcf, 0x56, 0x21, 0x74, 0xc4, 0xce]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AANaviDestination else {
            return XCTFail("Could not parse bytes as `AANaviDestination`")
        }
        
        XCTAssertEqual(capability.coordinates?.value?.bytes, AACoordinates(latitude: 52.520008, longitude: 13.404954).bytes)
    }
    
    func testDestinationName() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x31, 0x01, 0x02, 0x00, 0x09, 0x01, 0x00, 0x06, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AANaviDestination else {
            return XCTFail("Could not parse bytes as `AANaviDestination`")
        }
        
        XCTAssertEqual(capability.destinationName?.value, "Berlin")
    }
    
    func testDataSlotsFree() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x31, 0x01, 0x03, 0x00, 0x04, 0x01, 0x00, 0x01, 0x0e]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AANaviDestination else {
            return XCTFail("Could not parse bytes as `AANaviDestination`")
        }
        
        XCTAssertEqual(capability.dataSlotsFree?.value, 14)
    }
    
    func testDataSlotsMax() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x31, 0x01, 0x04, 0x00, 0x04, 0x01, 0x00, 0x01, 0x1e]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AANaviDestination else {
            return XCTFail("Could not parse bytes as `AANaviDestination`")
        }
        
        XCTAssertEqual(capability.dataSlotsMax?.value, 30)
    }
    
    func testArrivalDuration() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x31, 0x01, 0x05, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x07, 0x02, 0x40, 0x04, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AANaviDestination else {
            return XCTFail("Could not parse bytes as `AANaviDestination`")
        }
        
        XCTAssertEqual(capability.arrivalDuration?.value, Measurement<UnitDuration>(value: 2.6, unit: .hours))
    }
    
    func testDistanceToDestination() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x31, 0x01, 0x06, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x12, 0x04, 0x40, 0x94, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AANaviDestination else {
            return XCTFail("Could not parse bytes as `AANaviDestination`")
        }
        
        XCTAssertEqual(capability.distanceToDestination?.value, Measurement<UnitLength>(value: 1337.0, unit: .kilometers))
    }


    // MARK: Getters
    
    func testGetNaviDestination() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x31, 0x00]
        
        XCTAssertEqual(bytes, AANaviDestination.getNaviDestination())
    }
    
    func testGetNaviDestinationAvailability() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x31, 0x02]
        
        XCTAssertEqual(bytes, AANaviDestination.getNaviDestinationAvailability())
    }
    
    func testGetNaviDestinationProperties() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x31, 0x00, 0x01]
        let getterBytes = AANaviDestination.getNaviDestinationProperties(ids: .coordinates)
        
        XCTAssertEqual(bytes, getterBytes)
    }
    
    func testGetNaviDestinationPropertiesAvailability() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x31, 0x02, 0x01]
        let getterBytes = AANaviDestination.getNaviDestinationPropertiesAvailability(ids: .coordinates)
        
        XCTAssertEqual(bytes, getterBytes)
    }


    // MARK: Setters
    
    func testSetNaviDestination() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x31, 0x01, 0x01, 0x00, 0x13, 0x01, 0x00, 0x10, 0x40, 0x4a, 0x42, 0x8f, 0x9f, 0x44, 0xd4, 0x45, 0x40, 0x2a, 0xcf, 0x56, 0x21, 0x74, 0xc4, 0xce, 0x02, 0x00, 0x09, 0x01, 0x00, 0x06, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e]
        let setterBytes = AANaviDestination.setNaviDestination(coordinates: AACoordinates(latitude: 52.520008, longitude: 13.404954), destinationName: "Berlin")
        
        XCTAssertEqual(bytes, setterBytes)
    }


    // MARK: Identifiers
    
    func testCapabilityIdentifier() {
        XCTAssertEqual(AANaviDestination.identifier, 0x0031)
    }
    
    func testPropeertyIdentifiers() {
        XCTAssertEqual(AANaviDestination.PropertyIdentifier.coordinates.rawValue, 0x01)
        XCTAssertEqual(AANaviDestination.PropertyIdentifier.destinationName.rawValue, 0x02)
        XCTAssertEqual(AANaviDestination.PropertyIdentifier.dataSlotsFree.rawValue, 0x03)
        XCTAssertEqual(AANaviDestination.PropertyIdentifier.dataSlotsMax.rawValue, 0x04)
        XCTAssertEqual(AANaviDestination.PropertyIdentifier.arrivalDuration.rawValue, 0x05)
        XCTAssertEqual(AANaviDestination.PropertyIdentifier.distanceToDestination.rawValue, 0x06)
    }
}
