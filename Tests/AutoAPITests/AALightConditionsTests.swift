//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AALightConditionsTests.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities
import XCTest
@testable import AutoAPI


final class AALightConditionsTests: XCTestCase {

    // MARK: State Properties
    
    func testOutsideLight() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x54, 0x01, 0x01, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x11, 0x00, 0x40, 0xfb, 0x19, 0x80, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AALightConditions else {
            return XCTFail("Could not parse bytes as `AALightConditions`")
        }
        
        XCTAssertEqual(capability.outsideLight?.value, Measurement<UnitIlluminance>(value: 111000.0, unit: .lux))
    }
    
    func testInsideLight() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x54, 0x01, 0x02, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x11, 0x00, 0x3f, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AALightConditions else {
            return XCTFail("Could not parse bytes as `AALightConditions`")
        }
        
        XCTAssertEqual(capability.insideLight?.value, Measurement<UnitIlluminance>(value: 0.25, unit: .lux))
    }


    // MARK: Getters
    
    func testGetLightConditions() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x54, 0x00]
        
        XCTAssertEqual(bytes, AALightConditions.getLightConditions())
    }
    
    func testGetLightConditionsAvailability() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x54, 0x02]
        
        XCTAssertEqual(bytes, AALightConditions.getLightConditionsAvailability())
    }
    
    func testGetLightConditionsProperties() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x54, 0x00, 0x01]
        let getterBytes = AALightConditions.getLightConditionsProperties(ids: .outsideLight)
        
        XCTAssertEqual(bytes, getterBytes)
    }
    
    func testGetLightConditionsPropertiesAvailability() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x54, 0x02, 0x01]
        let getterBytes = AALightConditions.getLightConditionsPropertiesAvailability(ids: .outsideLight)
        
        XCTAssertEqual(bytes, getterBytes)
    }


    // MARK: Identifiers
    
    func testCapabilityIdentifier() {
        XCTAssertEqual(AALightConditions.identifier, 0x0054)
    }
    
    func testPropeertyIdentifiers() {
        XCTAssertEqual(AALightConditions.PropertyIdentifier.outsideLight.rawValue, 0x01)
        XCTAssertEqual(AALightConditions.PropertyIdentifier.insideLight.rawValue, 0x02)
    }
}
