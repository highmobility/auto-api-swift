//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AACruiseControlTests.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2020 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities
import XCTest
@testable import AutoAPI


final class AACruiseControlTests: XCTestCase {

    // MARK: State Properties
    
    func testCruiseControl() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x62, 0x01, 0x01, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AACruiseControl else {
            return XCTFail("Could not parse bytes as `AACruiseControl`")
        }
        
        XCTAssertEqual(capability.cruiseControl?.value, AAActiveState.active)
    }
    
    func testLimiter() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x62, 0x01, 0x02, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AACruiseControl else {
            return XCTFail("Could not parse bytes as `AACruiseControl`")
        }
        
        XCTAssertEqual(capability.limiter?.value, AACruiseControl.Limiter.higherSpeedRequested)
    }
    
    func testTargetSpeed() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x62, 0x01, 0x03, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x16, 0x01, 0x40, 0x4e, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AACruiseControl else {
            return XCTFail("Could not parse bytes as `AACruiseControl`")
        }
        
        XCTAssertEqual(capability.targetSpeed?.value, Measurement<UnitSpeed>(value: 61.0, unit: .kilometersPerHour))
    }
    
    func testAdaptiveCruiseControl() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x62, 0x01, 0x04, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AACruiseControl else {
            return XCTFail("Could not parse bytes as `AACruiseControl`")
        }
        
        XCTAssertEqual(capability.adaptiveCruiseControl?.value, AAActiveState.inactive)
    }
    
    func testAccTargetSpeed() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x62, 0x01, 0x05, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x16, 0x01, 0x40, 0x50, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AACruiseControl else {
            return XCTFail("Could not parse bytes as `AACruiseControl`")
        }
        
        XCTAssertEqual(capability.accTargetSpeed?.value, Measurement<UnitSpeed>(value: 67.0, unit: .kilometersPerHour))
    }


    // MARK: Getters
    
    func testGetCruiseControlState() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x62, 0x00]
        
        XCTAssertEqual(bytes, AACruiseControl.getCruiseControlState())
    }
    
    func testGetCruiseControlStateAvailability() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x62, 0x02]
        
        XCTAssertEqual(bytes, AACruiseControl.getCruiseControlStateAvailability())
    }
    
    func testGetCruiseControlStateProperties() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x62, 0x00, 0x01]
        let getterBytes = AACruiseControl.getCruiseControlStateProperties(ids: .cruiseControl)
        
        XCTAssertEqual(bytes, getterBytes)
    }
    
    func testGetCruiseControlStatePropertiesAvailability() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x62, 0x02, 0x01]
        let getterBytes = AACruiseControl.getCruiseControlStatePropertiesAvailability(ids: .cruiseControl)
        
        XCTAssertEqual(bytes, getterBytes)
    }


    // MARK: Setters
    
    func testActivateDeactivateCruiseControl() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x62, 0x01, 0x01, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01, 0x03, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x16, 0x01, 0x40, 0x4e, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00]
        let setterBytes = AACruiseControl.activateDeactivateCruiseControl(cruiseControl: AAActiveState.active, targetSpeed: Measurement<UnitSpeed>(value: 61.0, unit: .kilometersPerHour))
        
        XCTAssertEqual(bytes, setterBytes)
    }


    // MARK: Identifiers
    
    func testCapabilityIdentifier() {
        XCTAssertEqual(AACruiseControl.identifier, 0x0062)
    }
    
    func testPropeertyIdentifiers() {
        XCTAssertEqual(AACruiseControl.PropertyIdentifier.cruiseControl.rawValue, 0x01)
        XCTAssertEqual(AACruiseControl.PropertyIdentifier.limiter.rawValue, 0x02)
        XCTAssertEqual(AACruiseControl.PropertyIdentifier.targetSpeed.rawValue, 0x03)
        XCTAssertEqual(AACruiseControl.PropertyIdentifier.adaptiveCruiseControl.rawValue, 0x04)
        XCTAssertEqual(AACruiseControl.PropertyIdentifier.accTargetSpeed.rawValue, 0x05)
    }
}