//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AAWiFiTests.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities
import XCTest
@testable import AutoAPI


final class AAWiFiTests: XCTestCase {

    // MARK: State Properties
    
    func testStatus() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x59, 0x01, 0x01, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAWiFi else {
            return XCTFail("Could not parse bytes as `AAWiFi`")
        }
        
        XCTAssertEqual(capability.status?.value, AAEnabledState.enabled)
    }
    
    func testNetworkConnected() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x59, 0x01, 0x02, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAWiFi else {
            return XCTFail("Could not parse bytes as `AAWiFi`")
        }
        
        XCTAssertEqual(capability.networkConnected?.value, AAConnectionState.connected)
    }
    
    func testNetworkSSID() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x59, 0x01, 0x03, 0x00, 0x07, 0x01, 0x00, 0x04, 0x48, 0x4f, 0x4d, 0x45]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAWiFi else {
            return XCTFail("Could not parse bytes as `AAWiFi`")
        }
        
        XCTAssertEqual(capability.networkSSID?.value, "HOME")
    }
    
    func testNetworkSecurity() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x59, 0x01, 0x04, 0x00, 0x04, 0x01, 0x00, 0x01, 0x03]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAWiFi else {
            return XCTFail("Could not parse bytes as `AAWiFi`")
        }
        
        XCTAssertEqual(capability.networkSecurity?.value, AANetworkSecurity.wpa2Personal)
    }


    // MARK: Non-state or Deprecated Properties
    
    func testPassword() {
        let bytes: [UInt8] = [0x05, 0x00, 0x11, 0x01, 0x00, 0x0e, 0x67, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x31, 0x32]
        
        guard let property: AAProperty<String> = AAOpaqueProperty(bytes: bytes)?.property() else {
            return XCTFail("Could not create a property for `.password`")
        }
        
        XCTAssertEqual(property.value, "great_secret12")
    }


    // MARK: Getters
    
    func testGetWiFiState() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x59, 0x00]
        
        XCTAssertEqual(bytes, AAWiFi.getWiFiState())
    }
    
    func testGetWiFiStateAvailability() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x59, 0x02]
        
        XCTAssertEqual(bytes, AAWiFi.getWiFiStateAvailability())
    }
    
    func testGetWiFiStateProperties() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x59, 0x00, 0x01]
        let getterBytes = AAWiFi.getWiFiStateProperties(ids: .status)
        
        XCTAssertEqual(bytes, getterBytes)
    }
    
    func testGetWiFiStatePropertiesAvailability() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x59, 0x02, 0x01]
        let getterBytes = AAWiFi.getWiFiStatePropertiesAvailability(ids: .status)
        
        XCTAssertEqual(bytes, getterBytes)
    }


    // MARK: Setters
    
    func testConnectToNetwork() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x59, 0x01, 0x03, 0x00, 0x07, 0x01, 0x00, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x04, 0x00, 0x04, 0x01, 0x00, 0x01, 0x03, 0x05, 0x00, 0x11, 0x01, 0x00, 0x0e, 0x67, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x31, 0x32]
        let setterBytes = AAWiFi.connectToNetwork(networkSSID: "HOME", networkSecurity: AANetworkSecurity.wpa2Personal, password: "great_secret12")
        
        XCTAssertEqual(bytes, setterBytes)
    }
    
    func testForgetNetwork() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x59, 0x01, 0x03, 0x00, 0x07, 0x01, 0x00, 0x04, 0x48, 0x4f, 0x4d, 0x45]
        let setterBytes = AAWiFi.forgetNetwork(networkSSID: "HOME")
        
        XCTAssertEqual(bytes, setterBytes)
    }
    
    func testEnableDisableWiFi() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x59, 0x01, 0x01, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01]
        let setterBytes = AAWiFi.enableDisableWiFi(status: AAEnabledState.enabled)
        
        XCTAssertEqual(bytes, setterBytes)
    }


    // MARK: Identifiers
    
    func testCapabilityIdentifier() {
        XCTAssertEqual(AAWiFi.identifier, 0x0059)
    }
    
    func testPropeertyIdentifiers() {
        XCTAssertEqual(AAWiFi.PropertyIdentifier.status.rawValue, 0x01)
        XCTAssertEqual(AAWiFi.PropertyIdentifier.networkConnected.rawValue, 0x02)
        XCTAssertEqual(AAWiFi.PropertyIdentifier.networkSSID.rawValue, 0x03)
        XCTAssertEqual(AAWiFi.PropertyIdentifier.networkSecurity.rawValue, 0x04)
        XCTAssertEqual(AAWiFi.PropertyIdentifier.password.rawValue, 0x05)
    }
}