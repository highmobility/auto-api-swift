//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AATachographTests.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities
import XCTest
@testable import AutoAPI


final class AATachographTests: XCTestCase {

    // MARK: State Properties
    
    func testDriversWorkingStates() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x64, 0x01, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x01, 0x02, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x02, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATachograph else {
            return XCTFail("Could not parse bytes as `AATachograph`")
        }
        
        guard let driversWorkingStates = capability.driversWorkingStates?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.driversWorkingStates` values from `AATachograph` capability")
        }
        
        XCTAssertTrue(driversWorkingStates.contains { $0.bytes == AADriverWorkingState(driverNumber: 1, workingState: .working).bytes })
        XCTAssertTrue(driversWorkingStates.contains { $0.bytes == AADriverWorkingState(driverNumber: 2, workingState: .resting).bytes })
    }
    
    func testDriversTimeStates() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x64, 0x01, 0x02, 0x00, 0x05, 0x01, 0x00, 0x02, 0x03, 0x02, 0x02, 0x00, 0x05, 0x01, 0x00, 0x02, 0x04, 0x05]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATachograph else {
            return XCTFail("Could not parse bytes as `AATachograph`")
        }
        
        guard let driversTimeStates = capability.driversTimeStates?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.driversTimeStates` values from `AATachograph` capability")
        }
        
        XCTAssertTrue(driversTimeStates.contains { $0.bytes == AADriverTimeState(driverNumber: 3, timeState: .fourReached).bytes })
        XCTAssertTrue(driversTimeStates.contains { $0.bytes == AADriverTimeState(driverNumber: 4, timeState: .fifteenMinBeforeSixteen).bytes })
    }
    
    func testDriversCardsPresent() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x64, 0x01, 0x03, 0x00, 0x05, 0x01, 0x00, 0x02, 0x06, 0x01, 0x03, 0x00, 0x05, 0x01, 0x00, 0x02, 0x07, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATachograph else {
            return XCTFail("Could not parse bytes as `AATachograph`")
        }
        
        guard let driversCardsPresent = capability.driversCardsPresent?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.driversCardsPresent` values from `AATachograph` capability")
        }
        
        XCTAssertTrue(driversCardsPresent.contains { $0.bytes == AADriverCardPresent(driverNumber: 6, cardPresent: .present).bytes })
        XCTAssertTrue(driversCardsPresent.contains { $0.bytes == AADriverCardPresent(driverNumber: 7, cardPresent: .notPresent).bytes })
    }
    
    func testVehicleMotion() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x64, 0x01, 0x04, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATachograph else {
            return XCTFail("Could not parse bytes as `AATachograph`")
        }
        
        XCTAssertEqual(capability.vehicleMotion?.value, AADetected.detected)
    }
    
    func testVehicleOverspeed() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x64, 0x01, 0x05, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATachograph else {
            return XCTFail("Could not parse bytes as `AATachograph`")
        }
        
        XCTAssertEqual(capability.vehicleOverspeed?.value, VehicleOverspeed.noOverspeed)
    }
    
    func testVehicleDirection() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x64, 0x01, 0x06, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATachograph else {
            return XCTFail("Could not parse bytes as `AATachograph`")
        }
        
        XCTAssertEqual(capability.vehicleDirection?.value, VehicleDirection.forward)
    }
    
    func testVehicleSpeed() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x64, 0x01, 0x07, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x16, 0x01, 0x40, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AATachograph else {
            return XCTFail("Could not parse bytes as `AATachograph`")
        }
        
        XCTAssertEqual(capability.vehicleSpeed?.value, Measurement<UnitSpeed>(value: 80.0, unit: .kilometersPerHour))
    }


    // MARK: Getters
    
    func testGetTachographState() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x64, 0x00]
        
        XCTAssertEqual(bytes, AATachograph.getTachographState())
    }
    
    func testGetTachographStateAvailability() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x64, 0x02]
        
        XCTAssertEqual(bytes, AATachograph.getTachographStateAvailability())
    }
    
    func testGetTachographStateProperties() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x64, 0x00, 0x01]
        let getterBytes = AATachograph.getTachographStateProperties(ids: .driversWorkingStates)
        
        XCTAssertEqual(bytes, getterBytes)
    }
    
    func testGetTachographStatePropertiesAvailability() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x64, 0x02, 0x01]
        let getterBytes = AATachograph.getTachographStatePropertiesAvailability(ids: .driversWorkingStates)
        
        XCTAssertEqual(bytes, getterBytes)
    }


    // MARK: Identifiers
    
    func testCapabilityIdentifier() {
        XCTAssertEqual(AATachograph.identifier, 0x0064)
    }
    
    func testPropeertyIdentifiers() {
        XCTAssertEqual(AATachograph.PropertyIdentifier.driversWorkingStates.rawValue, 0x01)
        XCTAssertEqual(AATachograph.PropertyIdentifier.driversTimeStates.rawValue, 0x02)
        XCTAssertEqual(AATachograph.PropertyIdentifier.driversCardsPresent.rawValue, 0x03)
        XCTAssertEqual(AATachograph.PropertyIdentifier.vehicleMotion.rawValue, 0x04)
        XCTAssertEqual(AATachograph.PropertyIdentifier.vehicleOverspeed.rawValue, 0x05)
        XCTAssertEqual(AATachograph.PropertyIdentifier.vehicleDirection.rawValue, 0x06)
        XCTAssertEqual(AATachograph.PropertyIdentifier.vehicleSpeed.rawValue, 0x07)
    }
}