//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AAClimateTests.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2021 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities
import XCTest
@testable import AutoAPI


final class AAClimateTests: XCTestCase {

    // MARK: State Properties
    
    func testInsideTemperature() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x01, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x17, 0x01, 0x40, 0x33, 0x19, 0x99, 0x99, 0x99, 0x99, 0x9a]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAClimate else {
            return XCTFail("Could not parse bytes as `AAClimate`")
        }
        
        XCTAssertEqual(capability.insideTemperature?.value, Measurement<UnitTemperature>(value: 19.1, unit: .celsius))
    }
    
    func testOutsideTemperature() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x02, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x17, 0x01, 0x40, 0x28, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAClimate else {
            return XCTFail("Could not parse bytes as `AAClimate`")
        }
        
        XCTAssertEqual(capability.outsideTemperature?.value, Measurement<UnitTemperature>(value: 12.2, unit: .celsius))
    }
    
    func testDriverTemperatureSetting() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x03, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x17, 0x01, 0x40, 0x35, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAClimate else {
            return XCTFail("Could not parse bytes as `AAClimate`")
        }
        
        XCTAssertEqual(capability.driverTemperatureSetting?.value, Measurement<UnitTemperature>(value: 21.5, unit: .celsius))
    }
    
    func testPassengerTemperatureSetting() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x04, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x17, 0x01, 0x40, 0x35, 0xb3, 0x33, 0x33, 0x33, 0x33, 0x33]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAClimate else {
            return XCTFail("Could not parse bytes as `AAClimate`")
        }
        
        XCTAssertEqual(capability.passengerTemperatureSetting?.value, Measurement<UnitTemperature>(value: 21.7, unit: .celsius))
    }
    
    func testHvacState() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x05, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAClimate else {
            return XCTFail("Could not parse bytes as `AAClimate`")
        }
        
        XCTAssertEqual(capability.hvacState?.value, AAActiveState.active)
    }
    
    func testDefoggingState() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x06, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAClimate else {
            return XCTFail("Could not parse bytes as `AAClimate`")
        }
        
        XCTAssertEqual(capability.defoggingState?.value, AAActiveState.inactive)
    }
    
    func testDefrostingState() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x07, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAClimate else {
            return XCTFail("Could not parse bytes as `AAClimate`")
        }
        
        XCTAssertEqual(capability.defrostingState?.value, AAActiveState.inactive)
    }
    
    func testIonisingState() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x08, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAClimate else {
            return XCTFail("Could not parse bytes as `AAClimate`")
        }
        
        XCTAssertEqual(capability.ionisingState?.value, AAActiveState.inactive)
    }
    
    func testDefrostingTemperatureSetting() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x09, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x17, 0x01, 0x40, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAClimate else {
            return XCTFail("Could not parse bytes as `AAClimate`")
        }
        
        XCTAssertEqual(capability.defrostingTemperatureSetting?.value, Measurement<UnitTemperature>(value: 21.2, unit: .celsius))
    }
    
    func testHvacWeekdayStartingTimes() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x00, 0x10, 0x00, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x01, 0x10, 0x00, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x02, 0x10, 0x00, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x03, 0x10, 0x00, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x04, 0x10, 0x00, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x05, 0x12, 0x1e, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x06, 0x13, 0x1f, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x07, 0x10, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAClimate else {
            return XCTFail("Could not parse bytes as `AAClimate`")
        }
        
        guard let hvacWeekdayStartingTimes = capability.hvacWeekdayStartingTimes?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.hvacWeekdayStartingTimes` values from `AAClimate` capability")
        }
        
        XCTAssertTrue(hvacWeekdayStartingTimes.contains { $0.bytes == AAWeekdayTime(weekday: .monday, time: AATime(hour: 16, minute: 0)).bytes })
        XCTAssertTrue(hvacWeekdayStartingTimes.contains { $0.bytes == AAWeekdayTime(weekday: .tuesday, time: AATime(hour: 16, minute: 0)).bytes })
        XCTAssertTrue(hvacWeekdayStartingTimes.contains { $0.bytes == AAWeekdayTime(weekday: .wednesday, time: AATime(hour: 16, minute: 0)).bytes })
        XCTAssertTrue(hvacWeekdayStartingTimes.contains { $0.bytes == AAWeekdayTime(weekday: .thursday, time: AATime(hour: 16, minute: 0)).bytes })
        XCTAssertTrue(hvacWeekdayStartingTimes.contains { $0.bytes == AAWeekdayTime(weekday: .friday, time: AATime(hour: 16, minute: 0)).bytes })
        XCTAssertTrue(hvacWeekdayStartingTimes.contains { $0.bytes == AAWeekdayTime(weekday: .saturday, time: AATime(hour: 18, minute: 30)).bytes })
        XCTAssertTrue(hvacWeekdayStartingTimes.contains { $0.bytes == AAWeekdayTime(weekday: .sunday, time: AATime(hour: 19, minute: 31)).bytes })
        XCTAssertTrue(hvacWeekdayStartingTimes.contains { $0.bytes == AAWeekdayTime(weekday: .automatic, time: AATime(hour: 16, minute: 0)).bytes })
    }
    
    func testRearTemperatureSetting() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x0c, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x17, 0x01, 0x40, 0x35, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9a]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AAClimate else {
            return XCTFail("Could not parse bytes as `AAClimate`")
        }
        
        XCTAssertEqual(capability.rearTemperatureSetting?.value, Measurement<UnitTemperature>(value: 21.6, unit: .celsius))
    }


    // MARK: Getters
    
    func testGetClimateState() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x00]
        
        XCTAssertEqual(bytes, AAClimate.getClimateState())
    }
    
    func testGetClimateStateAvailability() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x02]
        
        XCTAssertEqual(bytes, AAClimate.getClimateStateAvailability())
    }
    
    func testGetClimateStateProperties() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x00, 0x01]
        let getterBytes = AAClimate.getClimateStateProperties(ids: .insideTemperature)
        
        XCTAssertEqual(bytes, getterBytes)
    }
    
    func testGetClimateStatePropertiesAvailability() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x02, 0x01]
        let getterBytes = AAClimate.getClimateStatePropertiesAvailability(ids: .insideTemperature)
        
        XCTAssertEqual(bytes, getterBytes)
    }


    // MARK: Setters
    
    func testChangeStartingTimes() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x00, 0x10, 0x00, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x01, 0x10, 0x00, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x02, 0x10, 0x00, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x03, 0x10, 0x00, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x04, 0x10, 0x00, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x05, 0x12, 0x1e, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x06, 0x13, 0x1f, 0x0b, 0x00, 0x06, 0x01, 0x00, 0x03, 0x07, 0x10, 0x00]
        let setterBytes = AAClimate.changeStartingTimes(hvacWeekdayStartingTimes: [AAWeekdayTime(weekday: .monday, time: AATime(hour: 16, minute: 0)), AAWeekdayTime(weekday: .tuesday, time: AATime(hour: 16, minute: 0)), AAWeekdayTime(weekday: .wednesday, time: AATime(hour: 16, minute: 0)), AAWeekdayTime(weekday: .thursday, time: AATime(hour: 16, minute: 0)), AAWeekdayTime(weekday: .friday, time: AATime(hour: 16, minute: 0)), AAWeekdayTime(weekday: .saturday, time: AATime(hour: 18, minute: 30)), AAWeekdayTime(weekday: .sunday, time: AATime(hour: 19, minute: 31)), AAWeekdayTime(weekday: .automatic, time: AATime(hour: 16, minute: 0))])
        
        XCTAssertEqual(bytes, setterBytes)
    }
    
    func testStartStopHvac() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x05, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01]
        let setterBytes = AAClimate.startStopHvac(hvacState: AAActiveState.active)
        
        XCTAssertEqual(bytes, setterBytes)
    }
    
    func testStartStopDefogging() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x06, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00]
        let setterBytes = AAClimate.startStopDefogging(defoggingState: AAActiveState.inactive)
        
        XCTAssertEqual(bytes, setterBytes)
    }
    
    func testStartStopDefrosting() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x07, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00]
        let setterBytes = AAClimate.startStopDefrosting(defrostingState: AAActiveState.inactive)
        
        XCTAssertEqual(bytes, setterBytes)
    }
    
    func testStartStopIonising() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x08, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00]
        let setterBytes = AAClimate.startStopIonising(ionisingState: AAActiveState.inactive)
        
        XCTAssertEqual(bytes, setterBytes)
    }
    
    func testSetTemperatureSettings() {
        let bytes: [UInt8] = [0x0d, 0x00, 0x24, 0x01, 0x03, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x17, 0x01, 0x40, 0x35, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x17, 0x01, 0x40, 0x35, 0xb3, 0x33, 0x33, 0x33, 0x33, 0x33, 0x0c, 0x00, 0x0d, 0x01, 0x00, 0x0a, 0x17, 0x01, 0x40, 0x35, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9a]
        let setterBytes = AAClimate.setTemperatureSettings(driverTemperatureSetting: Measurement<UnitTemperature>(value: 21.5, unit: .celsius), passengerTemperatureSetting: Measurement<UnitTemperature>(value: 21.7, unit: .celsius), rearTemperatureSetting: Measurement<UnitTemperature>(value: 21.6, unit: .celsius))
        
        XCTAssertEqual(bytes, setterBytes)
    }


    // MARK: Identifiers
    
    func testCapabilityIdentifier() {
        XCTAssertEqual(AAClimate.identifier, 0x0024)
    }
    
    func testPropeertyIdentifiers() {
        XCTAssertEqual(AAClimate.PropertyIdentifier.insideTemperature.rawValue, 0x01)
        XCTAssertEqual(AAClimate.PropertyIdentifier.outsideTemperature.rawValue, 0x02)
        XCTAssertEqual(AAClimate.PropertyIdentifier.driverTemperatureSetting.rawValue, 0x03)
        XCTAssertEqual(AAClimate.PropertyIdentifier.passengerTemperatureSetting.rawValue, 0x04)
        XCTAssertEqual(AAClimate.PropertyIdentifier.hvacState.rawValue, 0x05)
        XCTAssertEqual(AAClimate.PropertyIdentifier.defoggingState.rawValue, 0x06)
        XCTAssertEqual(AAClimate.PropertyIdentifier.defrostingState.rawValue, 0x07)
        XCTAssertEqual(AAClimate.PropertyIdentifier.ionisingState.rawValue, 0x08)
        XCTAssertEqual(AAClimate.PropertyIdentifier.defrostingTemperatureSetting.rawValue, 0x09)
        XCTAssertEqual(AAClimate.PropertyIdentifier.hvacWeekdayStartingTimes.rawValue, 0x0b)
        XCTAssertEqual(AAClimate.PropertyIdentifier.rearTemperatureSetting.rawValue, 0x0c)
    }
}
