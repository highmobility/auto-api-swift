//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AALightsTests.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2020 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities
import XCTest
@testable import AutoAPI


final class AALightsTests: XCTestCase {

    // MARK: State Properties
    
    func testFrontExteriorLight() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x01, 0x01, 0x00, 0x04, 0x01, 0x00, 0x01, 0x02]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AALights else {
            return XCTFail("Could not parse bytes as `AALights`")
        }
        
        XCTAssertEqual(capability.frontExteriorLight?.value, .activeWithFullBeam)
    }
    
    func testRearExteriorLight() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x01, 0x02, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AALights else {
            return XCTFail("Could not parse bytes as `AALights`")
        }
        
        XCTAssertEqual(capability.rearExteriorLight?.value, .active)
    }
    
    func testAmbientLightColour() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x01, 0x04, 0x00, 0x06, 0x01, 0x00, 0x03, 0xff, 0x00, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AALights else {
            return XCTFail("Could not parse bytes as `AALights`")
        }
        
        XCTAssertEqual(capability.ambientLightColour?.value?.bytes, AARGBColour(red: 255, green: 0, blue: 0).bytes)
    }
    
    func testReverseLight() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x01, 0x05, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AALights else {
            return XCTFail("Could not parse bytes as `AALights`")
        }
        
        XCTAssertEqual(capability.reverseLight?.value, .inactive)
    }
    
    func testEmergencyBrakeLight() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x01, 0x06, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AALights else {
            return XCTFail("Could not parse bytes as `AALights`")
        }
        
        XCTAssertEqual(capability.emergencyBrakeLight?.value, .inactive)
    }
    
    func testFogLights() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x01, 0x07, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x00, 0x07, 0x00, 0x05, 0x01, 0x00, 0x02, 0x01, 0x01]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AALights else {
            return XCTFail("Could not parse bytes as `AALights`")
        }
        
        guard let fogLights = capability.fogLights?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.fogLights` values from `AALights` capability")
        }
        
        XCTAssertTrue(fogLights.contains { $0.bytes == AALight(location: .front, state: .inactive).bytes })
        XCTAssertTrue(fogLights.contains { $0.bytes == AALight(location: .rear, state: .active).bytes })
    }
    
    func testReadingLamps() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x01, 0x08, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x01, 0x08, 0x00, 0x05, 0x01, 0x00, 0x02, 0x01, 0x01, 0x08, 0x00, 0x05, 0x01, 0x00, 0x02, 0x02, 0x00, 0x08, 0x00, 0x05, 0x01, 0x00, 0x02, 0x03, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AALights else {
            return XCTFail("Could not parse bytes as `AALights`")
        }
        
        guard let readingLamps = capability.readingLamps?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.readingLamps` values from `AALights` capability")
        }
        
        XCTAssertTrue(readingLamps.contains { $0.bytes == AAReadingLamp(location: .frontLeft, state: .active).bytes })
        XCTAssertTrue(readingLamps.contains { $0.bytes == AAReadingLamp(location: .frontRight, state: .active).bytes })
        XCTAssertTrue(readingLamps.contains { $0.bytes == AAReadingLamp(location: .rearRight, state: .inactive).bytes })
        XCTAssertTrue(readingLamps.contains { $0.bytes == AAReadingLamp(location: .rearLeft, state: .inactive).bytes })
    }
    
    func testInteriorLights() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x01, 0x09, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x00, 0x09, 0x00, 0x05, 0x01, 0x00, 0x02, 0x01, 0x01]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AALights else {
            return XCTFail("Could not parse bytes as `AALights`")
        }
        
        guard let interiorLights = capability.interiorLights?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.interiorLights` values from `AALights` capability")
        }
        
        XCTAssertTrue(interiorLights.contains { $0.bytes == AALight(location: .front, state: .inactive).bytes })
        XCTAssertTrue(interiorLights.contains { $0.bytes == AALight(location: .rear, state: .active).bytes })
    }
    
    func testSwitchPosition() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x01, 0x0a, 0x00, 0x04, 0x01, 0x00, 0x01, 0x02]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AALights else {
            return XCTFail("Could not parse bytes as `AALights`")
        }
        
        XCTAssertEqual(capability.switchPosition?.value, .parkingLightRight)
    }


    // MARK: Getters
    
    func testGetLightsState() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x00]
        
        XCTAssertEqual(bytes, AALights.getLightsState())
    }
    
    func testGetLightsStateAvailability() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x02]
        
        XCTAssertEqual(bytes, AALights.getLightsStateAvailability())
    }
    
    func testGetLightsStateProperties() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x00, 0x01]
        let getterBytes = AALights.getLightsStateProperties(ids: .frontExteriorLight)
        
        XCTAssertEqual(bytes, getterBytes)
    }
    
    func testGetLightsStatePropertiesAvailability() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x02, 0x01]
        let getterBytes = AALights.getLightsStatePropertiesAvailability(ids: .frontExteriorLight)
        
        XCTAssertEqual(bytes, getterBytes)
    }


    // MARK: Setters
    
    func testControlLights() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x36, 0x01, 0x01, 0x00, 0x04, 0x01, 0x00, 0x01, 0x02, 0x02, 0x00, 0x04, 0x01, 0x00, 0x01, 0x01, 0x04, 0x00, 0x06, 0x01, 0x00, 0x03, 0xff, 0x00, 0x00, 0x07, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x00, 0x07, 0x00, 0x05, 0x01, 0x00, 0x02, 0x01, 0x01, 0x08, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x01, 0x08, 0x00, 0x05, 0x01, 0x00, 0x02, 0x01, 0x01, 0x08, 0x00, 0x05, 0x01, 0x00, 0x02, 0x02, 0x00, 0x08, 0x00, 0x05, 0x01, 0x00, 0x02, 0x03, 0x00, 0x09, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x00, 0x09, 0x00, 0x05, 0x01, 0x00, 0x02, 0x01, 0x01]
        let setterBytes = AALights.controlLights(ambientLightColour: AARGBColour(red: 255, green: 0, blue: 0), fogLights: [AALight(location: .front, state: .inactive), AALight(location: .rear, state: .active)], frontExteriorLight: .activeWithFullBeam, interiorLights: [AALight(location: .front, state: .inactive), AALight(location: .rear, state: .active)], readingLamps: [AAReadingLamp(location: .frontLeft, state: .active), AAReadingLamp(location: .frontRight, state: .active), AAReadingLamp(location: .rearRight, state: .inactive), AAReadingLamp(location: .rearLeft, state: .inactive)], rearExteriorLight: .active)
        
        XCTAssertEqual(bytes, setterBytes)
    }


    // MARK: Identifiers
    
    func testCapabilityIdentifier() {
        XCTAssertEqual(AALights.identifier, 0x0036)
    }
    
    func testPropeertyIdentifiers() {
        XCTAssertEqual(AALights.PropertyIdentifier.frontExteriorLight.rawValue, 0x01)
        XCTAssertEqual(AALights.PropertyIdentifier.rearExteriorLight.rawValue, 0x02)
        XCTAssertEqual(AALights.PropertyIdentifier.ambientLightColour.rawValue, 0x04)
        XCTAssertEqual(AALights.PropertyIdentifier.reverseLight.rawValue, 0x05)
        XCTAssertEqual(AALights.PropertyIdentifier.emergencyBrakeLight.rawValue, 0x06)
        XCTAssertEqual(AALights.PropertyIdentifier.fogLights.rawValue, 0x07)
        XCTAssertEqual(AALights.PropertyIdentifier.readingLamps.rawValue, 0x08)
        XCTAssertEqual(AALights.PropertyIdentifier.interiorLights.rawValue, 0x09)
        XCTAssertEqual(AALights.PropertyIdentifier.switchPosition.rawValue, 0x0a)
    }
}