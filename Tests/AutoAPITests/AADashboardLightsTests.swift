//
//  The MIT License
//
//  Copyright (c) 2014- High-Mobility GmbH (https://high-mobility.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//
//  AADashboardLightsTests.swift
//  AutoAPI
//
//  Generated by AutoAPIGenerator for Swift.
//  Copyright Â© 2020 High-Mobility GmbH. All rights reserved.
//

import Foundation
import HMUtilities
import XCTest
@testable import AutoAPI


final class AADashboardLightsTests: XCTestCase {

    // MARK: State Properties
    
    func testDashboardLights() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x61, 0x01, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x03, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x04, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x05, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x06, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x07, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x08, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x09, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x0a, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x0b, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x0c, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x0d, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x0e, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x0f, 0x01, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x10, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x11, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x12, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x13, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x14, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x15, 0x01, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x16, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x17, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x18, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x19, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x1a, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x1b, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x1c, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x1d, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x1e, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x1f, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x20, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x21, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x22, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x23, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x24, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x25, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x26, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x27, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x28, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x29, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x2a, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x2b, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x2c, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x2d, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x2e, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x2f, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x30, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x31, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x32, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x33, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x34, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x35, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x36, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x37, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x38, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x39, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x3a, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x3b, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x3c, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x3d, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x3e, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x3f, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x40, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x41, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x42, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x43, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x44, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x45, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x46, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x47, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x48, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x49, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x4a, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x4b, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x4c, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x4d, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x4e, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x4f, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x50, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x51, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x52, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x53, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x54, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x55, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x56, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x57, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x58, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x59, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x5a, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x5b, 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x02, 0x5c, 0x00]
        
        guard let capability = try? AAAutoAPI.parseBytes(bytes) as? AADashboardLights else {
            return XCTFail("Could not parse bytes as `AADashboardLights`")
        }
        
        guard let dashboardLights = capability.dashboardLights?.compactMap({ $0.value }) else {
            return XCTFail("Could not get `.dashboardLights` values from `AADashboardLights` capability")
        }
        
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .highBeam, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .lowBeam, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .hazardWarning, state: .on).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .brakeFailure, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .hatchOpen, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .fuelLevel, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .engineCoolantTemperature, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .batteryChargingCondition, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .engineOil, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .positionLights, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .frontFogLight, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .rearFogLight, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .parkHeating, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .engineIndicator, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .serviceCall, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .transmissionFluidTemperature, state: .on).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .transmissionFailure, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .antiLockBrakeFailure, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .wornBrakeLinings, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .windscreenWasherFluid, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .tireFailure, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .engineOilLevel, state: .on).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .engineCoolantLevel, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .steeringFailure, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .escIndication, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .brakeLights, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .adblueLevel, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .fuelFilterDiffPressure, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .seatBelt, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .advancedBraking, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .acc, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .trailerConnected, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .airbag, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .escSwitchedOff, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .laneDepartureWarningOff, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .airFilterMinder, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .airSuspensionRideControlFault, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .allWheelDriveDisabled, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .antiTheft, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .blindSpotDetection, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .chargeSystemFault, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .checkFuelCap, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .checkFuelFillInlet, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .checkFuelFilter, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .dcTempWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .dcWarningStatus, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .dieselEngineIdleShutdown, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .dieselEngineWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .dieselExhaustFluidSystemFault, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .dieselExhaustOverTemp, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .dieselExhaustFluidQuality, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .dieselFilterRegeneration, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .dieselParticulateFilter, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .dieselPreHeat, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .electricTrailerBrakeConnection, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .evBatteryCellMaxVoltWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .evBatteryCellMinVoltWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .evBatteryChargeEnergyStorageWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .evBatteryHighLevelWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .evBatteryHighTemperatureWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .evBatteryInsulationResistWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .evBatteryJumpLevelWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .evBatteryLowLevelWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .evBatteryMaxVoltVehEnergyWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .evBatteryMinVoltVehEnergyWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .evBatteryOverChargeWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .evBatteryPoorCellWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .evBatteryTempDiffWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .forwardCollisionWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .fuelDoorOpen, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .hillDescentControlFault, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .hillStartAssistWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .hvInterlockingStatusWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .lightingSystemFailure, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .malfunctionIndicator, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .motorControllerTempWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .parkAidMalfunction, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .passiveEntryPassiveStart, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .powertrainMalfunction, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .restraintsIndicatorWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .startStopEngineWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .tractionControlDisabled, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .tractionControlActive, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .tractionMotorTempWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .tirePressureMonitorSystemWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .waterInFuel, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .tireWarningFrontRight, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .tireWarningFrontLeft, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .tireWarningRearRight, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .tireWarningRearLeft, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .tireWarningSystemError, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .batteryLowWarning, state: .off).bytes })
        XCTAssertTrue(dashboardLights.contains { $0.bytes == AADashboardLight(name: .brakeFluidWarning, state: .off).bytes })
    }


    // MARK: Getters
    
    func testGetDashboardLights() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x61, 0x00]
        
        XCTAssertEqual(bytes, AADashboardLights.getDashboardLights())
    }
    
    func testGetDashboardLightsAvailability() {
        let bytes: [UInt8] = [0x0c, 0x00, 0x61, 0x02]
        
        XCTAssertEqual(bytes, AADashboardLights.getDashboardLightsAvailability())
    }


    // MARK: Identifiers
    
    func testCapabilityIdentifier() {
        XCTAssertEqual(AADashboardLights.identifier, 0x0061)
    }
    
    func testPropeertyIdentifiers() {
        XCTAssertEqual(AADashboardLights.PropertyIdentifier.dashboardLights.rawValue, 0x01)
    }
}